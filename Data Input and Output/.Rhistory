View(newdata)
newdata <- read.delim(file.choose(), header = T)
newdata <- read.delim(file.choose(), header = T)
newdata <- read.delim(file.choose(), header = T)
View(newdata)
View(newdata)
View(newdata)
View(newdata)
View(newdata)
newdata <- read.delim(file.choose(), header = T)
newda <- read.delim(file.choose(), header = T)
newda <- read.delim(file.choose(), header = T)
data2 <- read.table(file.choose(), header = T, sep="\t")
View(data2)
View(data2)
newda <- read.delim(file.choose(), header = T)
View(newda)
class(newda$country)
data <- read.csv(file="new_file.csv")
class(data$continent)
View(data)
class(data$country)
# if you want to convert this variable from character to factor then use the following command
data$continent <- as.factor(data$continent)
#Check the class now
class(data$continent)
# If you want to convert a variable form factor to character then use the follwoing command
data$continent <- as.character(data$continent)
class(data$continent)
View(data)
data[stringcols] <- lapply(data[stringcols], as.factor)
stringcols <- c("country", "continent")
data[stringcols] <- lapply(data[stringcols], as.factor)
class(data$country)
data[stringcols] <- lapply(data[stringcols], as.character)
class(data$country)
-------------------------------------------
#Reading and writing data for xlsx file
install.packages("xlsx")
library(xlsx)
library(gapminder)
write.table(gapminder, file = "xlsxfile.xlsx")
newfile=read.table(file="xlsxfile.xlsx",)
-------------------------------------------
#Reading and writing data for xlsx file
install.packages("xlsx")
library(xlsx)
library(gapminder)
write.table(gapminder, file = "xlsxfile.xlsx")
newfile=read.table(file="xlsxfile.xlsx",)
View(newfile)
newfil2e=read.table(file="xlsxfile.xlsx",)
View(newfil2e)
data <- read.csv("http://www.cookbook-r.com/Data_input_and_output/Loading_data_from_a_file/datafile.csv")
View(data)
# Loading a file from the internet
data <- read.csv("http://www.cookbook-r.com/Data_input_and_output/Loading_data_from_a_file/datafile.csv", header = F)
View(data)
View(data)
View(data)
# Manually Assign header names
names(data)<- c("First", "Last", "Sex", "Number")
View(data)
data2 <- data[-c(1)]
View(data2)
View(data)
data2 <- data[-c(1), ]
View(data2)
data3 <- data2[-c(), (3)]
data3 <- data2[-c(), 3]
data3 <- data2[-c(3)]
View(data3)
View(data)
View(data2)
View(data)
View(data)
myData = data [row_to_keep,]
# Another way to decide row to keep
row_to_keep = c( FALSE, TRUE, TRUE, TRUE)
myData = data [row_to_keep,]
View(myData)
read.table("clipboard", header = TRUE, strip.white = TRUE)
f1 = read.table("clipboard", header = TRUE, strip.white = TRUE)
View(f1)
f2 = read.table("clipboard", header = TRUE)
View(f2)
f2 = read.table("clipboard", header = TRUE, strip.white = TRUE)
View(f2)
f2 = read.table("clipboard", header = TRUE, strip.white = TRUE)
read.fwf("clipboard",
c(7, 5, -2, 1,1,1,1,1,1),
skip = 1,
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE)
read.fwf("New Text Document.txt",
c(7, 5, -2, 1,1,1,1,1,1),
skip = 1,
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE)
read.fwf("New Text Document.txt",
c(7, 5, -2, 1, 1, 1, 1, 1, 1),
skip = 1,
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE)
read.fwf("New Text Document.txt",
c(7, 5, -2, 1, 1, 1, 1, 1, 1),
skip = 1,
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE, header = TRUE)
f3 = read.fwf("New Text Document.txt",
c(7, 5, -2, 1, 1, 1, 1, 1, 1),
skip = 1,
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE, header = TRUE)
View(f3)
f3 = read.fwf("New Text Document.txt",
c(7, 5, -2, 1, 1, 1, 1, 1, 1),
skip = 1,
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE)
View(f3)
View(f2)
View(f3)
f3 = read.fwf("New Text Document.txt",
widths = c(7, 5, -2, 1, 1, 1, 1, 1, 1),
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE)
View(f3)
f3 = read.fwf("New Text Document.txt",
widths = c(7, 5, -2, 1, 1, 1, 1, 1, 1),
skip = 1,
col.names = c("subject", "sex", "s1", "s2", "s3", "s4", "s5", "s6"),
strip.white=TRUE)
View(f3)
read.fwf("New Text Document.txt", c(7,5,-2,1,1,1,1,1,1), header=TRUE, strip.white=TRUE)
f4 = read.fwf("New Text Document.txt", c(7,5,-2,1,1,1,1,1,1), header=TRUE, strip.white=TRUE)
f4 = read.fwf("New Text Document.txt", c(7,5,-2,1,1,1,1,1,1), header=TRUE, strip.white=TRUE)
readClipboard()
rea = readClipboard()
rea = read.table("clipboard")
rea = read.table(file="clipboard")
rea = read.table(file = "clipboard")
data5 = read.table(file = "clipboard")
data5 = read.table(file = "clipboard")
dat = read.table(stdin(), header = T)
data5 = read.table('clipboard', header = TRUE)
data <- read.table('clipboard', header=TRUE)
View(data)
data <- read.table('clipboard', header=TRUE)
data <- read.table('clipboard', header=TRUE)
data <- read.table('clipboard', header=TRUE)
View(data)
data <- read.table('clipboard', header=TRUE)
View(data)
data <- read.table('clipboard', header=TRUE)
View(data)
data <- read.table(stdin(), header=TRUE)
View(data)
View(data)
View(data)
data <- read.table(stdin(), header=TRUE)
View(data)
View(data)
data2 = read.table(header = TRUE, text = '
size weight cost
small      8    8
medium     9    10
large     10    12
')
View(data2)
#One way to read it in is to simply use read.table() with strip.white=TRUE, which will remove extra spaces.
f1 = read.table("clipboard", header = TRUE, strip.white = TRUE)
```
#### Loading data from keyboard or clipboard <a name="datafromclipboard"></a>
```
data <- read.table('clipboard', header=TRUE)
```
#### Loading data from scripts <a name="datafromscripts"></a>
```
data2 = read.table(header = TRUE, text = '
size weight cost
small      8    8
medium     9    10
large     10    12
')
```
View(data2)
#One way to read it in is to simply use read.table() with strip.white=TRUE, which will remove extra spaces.
f1 = read.table("clipboard", header = TRUE, strip.white = TRUE)
```
#### Loading data from keyboard or clipboard <a name="datafromclipboard"></a>
```
data <- read.table('clipboard', header=TRUE)
```
#### Loading data from scripts <a name="datafromscripts"></a>
```
data2 = read.table(header = TRUE, text = '
size weight cost
small      8    8
medium     9    10
large     10    12
')
write.csv(data2, file="data2.csv", row.names = F)
```
#One way to read it in is to simply use read.table() with strip.white=TRUE, which will remove extra spaces.
f1 = read.table("clipboard", header = TRUE, strip.white = TRUE)
```
#### Loading data from keyboard or clipboard <a name="datafromclipboard"></a>
```
data <- read.table('clipboard', header=TRUE)
```
#### Loading data from scripts <a name="datafromscripts"></a>
```
data2 = read.table(header = TRUE, text = '
size weight cost
small      8    8
medium     9    10
large     10    12
')
write.csv(data2, file="data2.csv")
```
write.csv(data2, file="data2.csv", row.names = F)
write.csv(data2, file = "data2.csv", row.names = F, na = "")
```
View(data2)
write.csv(data2, file="data2.csv", row.names = F)
write.csv(data2, file = "data2.csv", row.names = F, na = "")
```
View(data2)
#One way to read it in is to simply use read.table() with strip.white=TRUE, which will remove extra spaces.
f1 = read.table("clipboard", header = TRUE, strip.white = TRUE)
```
#### Loading data from keyboard or clipboard <a name="datafromclipboard"></a>
```
data <- read.table('clipboard', header=TRUE)
```
#### Loading data from scripts <a name="datafromscripts"></a>
```
data2 = read.table(header = TRUE, text = '
size weight cost
small      8    8
medium     9    NA
large     10    12
')
View(data2)
write.csv(data2, file="data2.csv", row.names = F)
write.csv(data2, file = "data2.csv", row.names = F, na = "")
```
write.table(data2, "data2.csv", sep="\t", row.names=FALSE, col.names=FALSE)
```
View(data2)
#One way to read it in is to simply use read.table() with strip.white=TRUE, which will remove extra spaces.
f1 = read.table("clipboard", header = TRUE, strip.white = TRUE)
```
#### Loading data from keyboard or clipboard <a name="datafromclipboard"></a>
```
data <- read.table('clipboard', header=TRUE)
```
#### Loading data from scripts <a name="datafromscripts"></a>
```
data2 = read.table(header = TRUE, text = '
size weight cost
small      8    8
medium     9    NA
large     10    12
')
# Write to a file, suppress row names
write.csv(data2, file="data2.csv", row.names = F)
```
# Reading Excel Spreadsheets into R From The Clipboard. <a name="redingfromclipboard"></a>
If you have a spreadsheet open, you can actually copy the contents to your clipboard and import them quickly into R. To do this, you can either use the readClipboard() or read.table() functions:
```
readClipboard()
```
dump("data2", "data2.Rdmpd")
View(data)
View(data3)
```
# Reading Excel Spreadsheets into R From The Clipboard. <a name="redingfromclipboard"></a>
If you have a spreadsheet open, you can actually copy the contents to your clipboard and import them quickly into R. To do this, you can either use the readClipboard() or read.table() functions:
```
readClipboard()
```
# Saving data file in R data format
```
dump("data2", "data2.Rdmpd")
# and it will save like the following format.
data2 <-
structure(list(size = c("small", "medium", "large"), weight = 8:10,
cost = c(8L, NA, 12L)), class = "data.frame", row.names = c(NA,
-3L))
```
# If you want to save multiple objects:
dump(c("data2", "data3"), "data.Rdmpd")
# If you want to save multiple objects:
dump(c("data2", "data3"), "data.Rdmpd")
# and then it will save like the following format
data2 <-
structure(list(size = c("small", "medium", "large"), weight = 8:10,
cost = c(8L, NA, 12L)), class = "data.frame", row.names = c(NA,
-3L))
data3 <-
structure(list(First = c("Currer", "Dr.", ""), Last = c("Bell",
"Seuss", "Student"), Number = c("2", "49", "21")), row.names = 2:4, class = "data.frame")
```
source("data.Rdmpd")
saveRDS(data2, "data.rds")
# Save a single object in binary RDS format
saveRDS(data, "data.rds")
# Or, using ASCII format
saveRDS(data2, "data2.rds", ascii=TRUE)
View(data)
# Save a single object in binary RDS format
saveRDS(data, "data.rds")
# Or, using ASCII format
saveRDS(data2, "data2.rds", ascii=TRUE)
# To load the data again:
data <- readRDS("data.rds")
View(data)
# Save a single object in binary RDS format
saveRDS(data, "data.rds")
# Or, using ASCII format
saveRDS(data2, "data2.rds", ascii=TRUE)
# To load the data again:
data <- readRDS("data.rds")
# Save a single object in binary RDS format
saveRDS(data, "data.rds")
# Or, using ASCII format
saveRDS(data2, "data2.rds", ascii=TRUE)
# To load the data again:
data4 <- readRDS("data.rds")
View(data4)
# Writing text and output from analyses to a file with sing() function in R
# sinks the data into connection as text file
sink("my_first_sing.txt")
# Print numbers from 1 to 20
for (i in 1:20)
# Print numbers from 1 to 20
for (i in 1:20)
print(i)
# Print numbers from 1 to 20
for (i in 1:20)
print(i)
sink()
# Print numbers from 1 to 20
for (i in 1:20)
# Print numbers from 1 to 20
for (i in 1:20)
print(i)
# Print numbers from 1 to 20
for (i in 1:20)
print(i)
sink()
# Print numbers from 1 to 20
for (i in 1:20)
print(i)
sink()
# Writing text and output from analyses to a file with sing() function in R
# sinks the data into connection as text file
sink("my_first_sing.txt")
# Print numbers from 1 to 20
for (i in 1:20)
print(i)
sink()
data(airquality)
data(airquality)
view(airquality)
data("airquality")
View(airquality)
data(airquality)
view(airquality)
View(airquality)
data(airquality)
sink('export_dataframe.txt')
data(airquality)
sink('export_dataframe.txt')
airquality
View(airquality)
data(airquality)
sink('export_dataframe.txt', row.name = F)
airquality
data(airquality)
sink('export_dataframe.txt', row.name = F)
airquality
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt', row.name = F)
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt', row.name = F)
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt', row.name = F)
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
data(airquality)
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
data(airquality)
sink('export_data1.txt)
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
data(airquality)
sink('export_data1.txt)
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
data(airquality)
sink('export_data1.txt')
summary(airquality)
# How to export default R data into txt format using sink() function
```
data(airquality)
sink('export_dataframe.txt')
airquality
summary(airquality)
```
![Sink Function](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
data(airquality)
sink('export_data1.txt')
summary(airquality)
# if you want to remove the sink() function connected file then use the following command
unlink('export_data1.txt')
```
![Sink() Export](https://github.com/r1ridwan/R-programming/blob/master/Data%20Input%20and%20Output/Pictures/Screenshot_2.png)
unlink('export_data1.txt')
unlink('export_data1.txt')
sink('analysis-output.txt')
sink('analysis-output.txt')
set.seed(12345)
sink('analysis-output.txt')
set.seed(12345)
x <-rnorm(10,10,1)
y <-rnorm(10,11,1)
sink('analysis-output.txt')
set.seed(12345)
x <-rnorm(10,10,1)
y <-rnorm(10,11,1)
set.seed(12345)
x <-rnorm(10,10,1)
y <-rnorm(10,11,1)
unlink('analysis-output.txt')
unlink('analysis-output.txt')
