long_data
# Sample data frame (long format)
long_data <- data.frame(
ID = c(1, 1, 2, 2, 3, 3),
Name = c("Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"),
Subject = c("Math", "Science", "Math", "Science", "Math", "Science"),
Score = c(85, 75, 78, 80, 90, 88)
)
long_data
# Casting the data frame to wide format
wide_data <- dcast(long_data, ID + Name ~ Subject, value.var = "Score")
wide_data
long_data
row.names(data) <- c( "TP53", "SEZ6L", "MICALL1")
# CREATE A DATAFRAME OF THREE GENES WITH DIFFERENT VALUES
data = data.frame(
C1 = c(1887.7, 9.9, 236.4), C2=c(8.1, 8.9, 8.4), C3=c(1799.6, 7.7, 220.9),
P1 = c(800.2, 400.1, 127.8), P2 = c(785.3, 389.3, 156.3), P3 = c(800.4, 403.9, 140.2)
)
row.names(data) <- c( "TP53", "SEZ6L", "MICALL1")
data
# Sample data frame (wide format)
wide_data <- data.frame(
ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"),
Math = c(85, 78, 90),
Science = c(75, 80, 88),
English = c(92, 85, 78)
)
# Sample data frame (wide format)
wide_data <- data.frame(
ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"),
Math = c(85, 78, 90),
Science = c(75, 80, 88),
English = c(92, 85, 78)
)
# Reshaping to long format
long_data <- pivot_longer(wide_data, cols = c(Math, Science, English),
names_to = "Subject", values_to = "Score")
long_data
source("G:/GIT/R-programming/long_wide_data_transformation.R", echo=TRUE)
# Sample data frame (wide format)
wide_data <- data.frame(
ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"),
Math = c(85, 78, 90),
Science = c(75, 80, 88),
English = c(92, 85, 78)
)
wide_data
## 2. pivot_longer() and pivot_wider() to reshape data frames
# Load packages
library(tidyr)
wide_data
# Reshaping to long format
long_data <- pivot_longer(wide_data, cols = c(Math, Science, English),
names_to = "Subject", values_to = "Score")
long_data
# pivot_wider() function is used to reshape data from long to wide format
# Sample data frame (long format)
long_data <- data.frame(
ID = c(1, 1, 2, 2, 3, 3),
Name = c("Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"),
Subject = c("Math", "Science", "Math", "Science", "Math", "Science"),
Score = c(85, 75, 78, 80, 90, 88)
)
# Reshaping to wide format
wide_data <- pivot_wider(long_data, names_from = Subject, values_from = Score)
wide_data
# pivot_wider() function is used to reshape data from long to wide format
# Sample data frame (long format)
long_data <- data.frame(
ID = c(1, 1, 2, 2, 3, 3),
Name = c("Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"),
Subject = c("Math", "Science", "Math", "Science", "Math", "Science"),
Score = c(85, 75, 78, 80, 90, 88)
)
long_data
# Reshaping to wide format
wide_data <- pivot_wider(long_data, names_from = Subject, values_from = Score)
wide_data
# as.character(): Converts the input to character data type
x <- 10
y <- as.character(x)
class(y)
class(x)
# as.character(): Converts the input to character data type
x <- c(12, 12, 134)
y <- as.character(x)
class(y)
x
# 2. as.numeric(): Converts the input to numeric data typ
# character to numeric
x <- c("10", "11", "12")
y <- as.numeric(x)
class(y)
class(x)
# 3. as.integer(): Converts the input to integer data type
x <- 10.5
class(x)
y <- as.integer(x)
class(y)
# 4. as.logical(): Converts the input to logical (boolean) data type
# numeric to logical
x <- 0
y <- as.logical(x)
class(y)
class(x)
# 4. as.logical(): Converts the input to logical (boolean) data type
# numeric to logical
x <- 0
class(x)
# 5. as.factor(): Converts the input to a factor data type
x <- c("Male", "Female", "Male")
class(x)
y <- as.factor(x)
class(y)
# 6. as.list(): Converts the input to a list
x <- c(1, 2, 3)
class(x)
class(y)
data <- gapminder
library(gapminder)
data <- gapminder
data
setwd("G:/CHIRAL R_For_Bioinforamtics_Training/data")
("data/Life_Expectancy_Wide.xlsx")
wide_data
View(wide_data)
setwd("G:/GIT/R-programming")
# 7. reshaping data
wide_data <- import("data/Life_Expectancy_Wide.xlsx")
# subset by logical condition
vector <- c(10, 20, 30, 50, 60)
vector[vector > 30]
# subset by logical condition
vector <- c(10, 20, 30, 40, 50, 60)
vector[vector > 30]
vector[vector < 30]
vector[[2]]
vector[2]
# Create a list with different elements
my_list <- list(
name = "Md Ridwan Ahmed", # character value
age = 30, # Numeric value
is_student = TRUE, # Logical value
scores = c(90, 85, 92), # Numeric vector
matrix_data =  matrix(1:6, nrow = 2, byrow = T), # Matrix
sub_list = list(a = 10, b = c("x", "y", "z")) # Nested list
)
my_list
my_list[2:3]
mat <- matrix(1:9, ncol = 3, nrow = 3, byrow = T)
mat
# Sub-setting elements
mat[2,1]
mat
num <- 10
# if statement
if(condition) {
# inside if block ~ do something
}
if (num < 10) {
print("Negative number")
}
num <- 10
# if statement
if(condition) {
# inside if block ~ do something
}
if (num < 10) {
print("Negative number")
}
num <- 10
print("Negative number")
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
num <- 10
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 10) {
print("Negative number")
}
# else statement
if(condition) {
# if block ~ do something
} else {
# else block ~ do something
}
# 1. Conditional logic
num <- 10
if (num < 10) {
print("Negative number")
}
# 1. Conditional logic
num <- 9
# if statement
if(condition) {
# code to execute if condition is TRUE
}
if (num < 10) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
# 1. Conditional logic
num <- -9
if (num < 0) {
print("Negative number")
}
if(num < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
# 1. Conditional logic
num <- 9
if(num < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
num2 <- 6
if(num2 < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
if(num2 < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
# ifelse application
ages <- c(22, 11, 12, 23, 24, 54, 23, 34)
# ifelse() function
x <- 10
ifelse(x < 0, "negative", "Postive")
# ifelse application
ages <- c(22, 11, 12, 23, 24, 54, 23, 34)
ifelse(ages < 18, "Child", "Adult")
# ifelse application
ages <- c(22, 11, 12, 23, 24, 54, 23, 14)
ifelse(ages < 18, "Child", "Adult")
ifelse(qol_score < 50, "Poor", "Good")
bmi <- 25
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 18
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 25
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 24
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 25
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 30
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
# Handling missing values with ifelse
x <- c(1, 2, NA, 4, 5)
result <- ifelse(is.na(x), "Missing values", ifelse(x > 3, "Greater", "less or equeal"))
result
result
result
# Handling missing values with ifelse
x <- c(1, 2, NA, 3, 4, 5)
result <- ifelse(is.na(x), "Missing values", ifelse(x > 3, "Greater", "less or equeal"))
result
# Handling missing values with ifelse
x <- c(1, 2, NA, 3, 4, 5)
result <- ifelse(is.na(x), "Missing values", ifelse(x > 3, "Greater", "less or equeal"))
result
# Load packages
library(tidyverse)
library(GEOquery)
library(GEOquery)
library(ggpubr)
library(ggpubr)
# read data
data <- read.csv("GSE183947_fpkm.csv")
setwd("G:/CHIRAL R_For_Bioinforamtics_Training/bulkRNASeq/01_RNASeq_Manipulation")
# read data
data <- read.csv("GSE183947_fpkm.csv")
dim(data)
# read data
data <- read.csv("GSE183947_fpkm.csv")
data
View(data)
metadata <- pData(phenoData(ges[[1]]))
head(metadata)
metadata <- pData(phenoData(ges[[1]]))
# get metadata
ges <- getGEO(GEO = "GSE183947", GSEMatrix = TRUE)
ges
metadata <- pData(phenoData(ges[[1]]))
head(metadata)
metadata <- pData(phenoData(ges[[1]]))
View(ges)
View(metadata)
metadata_subset <- select(metadata, c(1, 10, 11, 17))
View(metadata_subset)
setwd("G:/GIT/R-programming")
# load packages
library(tidyverse)
# load packages
library(tidyverse)
library(airway)
# Install required
BiocManager::install("airway")
library(DESeq2)
library(EnhancedVolcano)
BiocManager::install("DESeq2")
BiocManager::install("EnhancedVolcano")
library(DESeq2)
library(EnhancedVolcano)
library(EnhancedVolcano)
# get info about data
?airway
# get info about data
?airway
library(airway)
# load packages
library(tidyverse)
# get info about data
?airway
# get data
# 1. count table ~ expression level
data(airway)
View(airway)
class(airway)
View(airway)
# extract count data
counts_data <- assay(airway)
View(counts_data)
View(counts_data)
# 2. metadata ~ sample information
col_data <- as.data.frame(colData(airway))
View(col_data)
View(counts_data)
View(counts_data)
View(col_data)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
View(counts_data)
View(col_data)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano)
# load packages
library(tidyverse)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
col_data
View(col_data)
col_data$dexamethasone <- gsub('trt', 'treated', col_data$dexamethasone)
View(col_data)
col_data$dexamethasone <- gsub('untrt', 'untreated', col_data$dexamethasone)
col_data
# making sure the row names in col_data matches to column names in counts_data
all(colnames(counts_data) %in% rownames(col_data))
# are they in the same order?
all(colnames(counts_data) == rownames(col_data))
View(counts_data)
View(counts_data)
# Step 2: construct a DESeqDataSetFromMatrix data object
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = col_data,
design = ~dexamethasone)
View(dds)
dds
# load packages
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano)
# get info about data
?airway
# get data
# 1. count table ~ expression level
data(airway)
# get data
# 1. count table ~ expression level
data(airway)
airway
class(airway)
# extract count data
counts_data <- assay(airway)
# extract count data
counts_data <- assay(airway)
# 2. metadata ~ sample information
col_data <- as.data.frame(colData(airway))
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
col_data$dexamethasone <- gsub('trt', 'treated', col_data$dexamethasone)
col_data$dexamethasone <- gsub('untrt', 'untreated', col_data$dexamethasone)
col_data
# making sure the row names in col_data matches to column names in counts_data
all(colnames(counts_data) %in% rownames(col_data))
# are they in the same order?
all(colnames(counts_data) == rownames(col_data))
# Step 2: construct a DESeqDataSetFromMatrix data object
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = col_data,
design = ~dexamethasone)
View(dds)
View(counts_data)
# pre-filtering: removing rows with low gene counts
# keep rows that have at least 10 reads total
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# reference category ~ set the factor level
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")
# Step 3. Run DESeq2
dds <- DESeq(dds)
# save as result
res <- results(dds)
res
# exploring results
summary(res)
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)
resultsNames(dds)
# contrast
contrast_res <- results(dds, contrast = c("dexamethasone", "treated", "untreated"))
contrast_res
plotMA(dds)
dds <- makeExampleDESeqDataSet(n=10000,m=18)
View(dds)
dds
