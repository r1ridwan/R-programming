while (i <= 10) {
print(i)
i = i + 1
}
while (i <= 10) {
print(i)
i = i + 1
}
# print 1 -10
i = 1
while (i <= 10) {
print(i)
i = i + 1
}
print(paste(i, "is odd"))
if (i %% 2 == 0) {
print(paste(i, "is evern"))
} else{
print(paste(i, "is odd"))
}
# using whilte loop with conditions
i = 1
i <- i +1
while (i <= 10) {
if (i %% 2 == 0) {
print(paste(i, "is evern"))
} else{
print(paste(i, "is odd"))
}
i <- i +1
}
# using whilte loop with conditions
i = 1
while (i <= 10) {
if (i %% 2 == 0) {
print(paste(i, "is evern"))
} else{
print(paste(i, "is odd"))
}
i <- i +1
}
while (i <= 10) {
if (i %% 2 == 0) {
print(paste(i, "is evern"))
} else{
print(paste(i, "is odd"))
}
i <- i + 1
}
# using whilte loop with conditions
i = 1
while (i <= 10) {
if (i %% 2 == 0) {
print(paste(i, "is evern"))
} else{
print(paste(i, "is odd"))
}
i <- i + 1
}
# while loop with external conditions
x <- 10
while (x > 0) {
print(x)
x <- x - 2
}
# while loop with external conditions
x <- 10
while (x > 0) {
print(x)
x <- x - 2
}
## 3. Next statement
for (i in 1:10) {
if(i == 3) {
next
}
print(i)
}
## 3. Next statement
for (i in 1:10) {
if(i == 3) {
next
}
print(i)
}
## 3. Next statement
for (i in 1:10) {
if(i == 3) {
next
}
print(i)
}
for (i in 1:10) {
if(i == 3) {
next
}
print(i)
}
i <- 1
i <- 1
while(i <= 10) {
print(i)
if(i == 5){
break
}
i <-  i + 1
}
i <- 1
while(i <= 10) {
print(i)
if(i == 5){
break
}
i <-  i + 1
}
## 4. Break statement
# use to exit a loop prematurely
for (i in 1:10) {
# Exits the loop when i equals 3
if(i == 3) {
break
}
print(i)
}
for (i in 1:10) {
if (i %% 2 == 0) {
next  # Skips the rest of the loop body for even numbers
}
print(i)
}
for (i in 1:10) {
if (i %% 2 == 0) {
next  # Skips the rest of the loop body for even numbers
}
print(i)
}
# Searching for a specific condition and handling edge cases
values <- c(1, 3, 5, -1, 7, 9, 12)
for (value in values) {
if (value == -1) {
print("Unexpected negative value, breaking loop.")
break  # Exit the loop if an unexpected value is found
}
if (value %% 2 == 0) {
next  # Skip processing for even numbers
}
# Process odd positive values
print(paste(value, "is an odd positive number."))
}
for (value in values) {
if (value == -1) {
print("Unexpected negative value, breaking loop.")
next  # Exit the loop if an unexpected value is found
}
if (value %% 2 == 0) {
next  # Skip processing for even numbers
}
# Process odd positive values
print(paste(value, "is an odd positive number."))
}
## 6. Repeat loop
i <-  1
repeat{
print(i)
i <-  i + 1
if (i > 5) {
break
}
}
## 6. Repeat loop
i <-  1
repeat{
print(i)
i <-  i + 1
if (i > 5) {
break
}
}
# Example: Asking for numeric input until it's provided
repeat {
userInput <- readline(prompt="Enter a numeric value: ")
# Check if the input is a numeric value
if (is.numeric(as.numeric(userInput)) && !is.na(as.numeric(userInput))) {
print(paste("You entered:", as.numeric(userInput)))
break  # Exit the loop
} else {
print("Invalid input, please enter a numeric value.")
}
}
# Example: Asking for numeric input until it's provided
repeat {
userInput <- readline(prompt="Enter a numeric value: ")
# Check if the input is a numeric value
if (is.numeric(as.numeric(userInput)) && !is.na(as.numeric(userInput))) {
print(paste("You entered:", as.numeric(userInput)))
break  # Exit the loop
} else {
print("Invalid input, please enter a numeric value.")
}
}
# Check if the input is a numeric value
if (is.numeric(as.numeric(userInput)) && !is.na(as.numeric(userInput))) {
print(paste("You entered:", as.numeric(userInput)))
break  # Exit the loop
} else {
print("Invalid input, please enter a numeric value.")
}
# Example: Asking for numeric input until it's provided
repeat {
userInput <- readline(prompt="Enter a numeric value: ")
# Check if the input is a numeric value
if (is.numeric(as.numeric(userInput)) && !is.na(as.numeric(userInput))) {
print(paste("You entered:", as.numeric(userInput)))
break  # Exit the loop
} else {
print("Invalid input, please enter a numeric value.")
}
}
repeat {
userInput <- readline(prompt="Enter a numeric value: ")
# Check if the input is a numeric value
if (is.numeric(as.numeric(userInput)) && !is.na(as.numeric(userInput))) {
print(paste("You entered:", as.numeric(userInput)))
break  # Exit the loop
} else {
print("Invalid input, please enter a numeric value.")
}
}
repeat {
userInput <- readline(prompt="Enter a numeric value: ")
# Check if the input is a numeric value
if (is.numeric(as.numeric(userInput)) && !is.na(as.numeric(userInput))) {
print(paste("You entered:", as.numeric(userInput)))
break  # Exit the loop
} else {
print("Invalid input, please enter a numeric value.")
}
}
# Example: Asking for numeric input until it's provided
repeat {
userInput <- readline(prompt="Enter a numeric value: ")
# Check if the input is a numeric value
if (is.numeric(as.numeric(userInput)) && !is.na(as.numeric(userInput))) {
print(paste("You entered:", as.numeric(userInput)))
break  # Exit the loop
} else {
print("Invalid input, please enter a numeric value.")
}
}
# Functions
# 1. Built-in functions
ages <- c(22, 11, 12, 23, 24, 54, 23, 34, 56)
# min and max
min(ages)
max(ages)
range(ages)
# measure of center
mean(ages)
median(ages)
sum(ages)
259 / 9
median(ages)
?median
median(1:4)
22 + 56
78 / 2
11 + 56
# add two numbers
add <- function(num1, num2) {
total <- num1 + num2
return(total)
}
add(20, 50)
# add multiple numbers
add_mul <- function(...) {
numbers <- c(...)
total <- sum(numbers)
return(total)
}
add_mul(20, 30, 50, 15)
sum(20, 30, 50)
add_new(1, 3, 4, 5, 7, 8, 9)
# return the total
return(total)
add_new <- function(...) {
# capture all argument in a list
args <- list(...)
# initialize total to zero
total <- 0
# iterate over each argument and add total
for (num in args) {
total <- total + num
}
# return the total
return(total)
}
add_new(1, 3, 4, 5, 7, 8, 9)
return(result)
# calling a function
my_function <- function(arg1, arg2) {
result(arg1 + arg2)
return(result)
}
result <- my_function(3, 5)
result
# calling a function
my_function <- function(arg1, arg2) {
result(arg1 + arg2)
return(result)
}
result <- my_function(3, 5)
result <- my_function(3, 5)
return(result)
# calling a function
my_function <- function(arg1, arg2) {
result(arg1 + arg2)
return(result)
}
result
# calling a function
my_function <- function(arg1, arg2) {
res(arg1 + arg2)
return(result)
}
result <- my_function(3, 5)
# calling a function
my_function <- function(arg1, arg2) {
res(arg1 + arg2)
return(res)
}
result <- my_function(3, 5)
# calling a function
my_function <- function(arg1, arg2) {
res(arg1 + arg2)
return(res)
}
res <- my_function(3, 5)
return(res)
# calling a function
my_function <- function(arg1, arg2) {
res(arg1 + arg2)
return(res)
}
# calling a function
my_function <- function(arg1, arg2) {
res(arg1 + arg2)
return(res)
}
multiplyNumbers <- function(x, y) {
x * y  # This will be returned automatically
}
multiplyNumbers(4, 6)
multiplyNumbers(4, 6)
multiplyNumbers(4, 7)
add(20, 50)
# Function with Default Argument Values
calculateArea <- function(length = 10, width = 5) {
area <- length * width
return(area)
}
calculateArea()
calculateArea(length = 7)
calculateArea(length = 9)
calculateArea(width = 9)
calculateArea(width = 9)
calculateArea(length = 9)
# Anonymous Functions
numbers <- c(1, 2, 3, 4, 5)
squared_numbers <- sapply(numbers, function(x) x^2)
squared_numbers
# Using lapply() with a List
number_list <- list(a = 1, b = 2, c = 3)
incremented_numbers <- lapply(number_list, function(x) x + 1)
incremented_numbers
# Filtering with Filter()
data <- -3:3
data <- -3:3
data
# Filtering with Filter()
data <- -3:3
positive_numbers <- Filter(function(x) x > 0, data)
positive_numbers
positive_numbers <- Filter(function(x) x < 0, data)
positive_numbers
positive_numbers <- Filter(function(x) x > 0, data)
positive_numbers
BiocVersion::
library(BiocManager)
BiocVersion::
BiocVersion::
BiocVersion::()
# Check Bioconductor version
BiocManager::version()
# Package version
package_version("Grange")
library(GenomicRanges)
# Package version
package_version("GenomicRanges")
# Package version
packageVersion("GenomicRanges")
# Package version
packageVersion("GenomicRanges")
# check Reference manual
?GenomicRanges
# Check Vignettes
browseVignettes("GenomicRanges")
## R - Base Types
# numeric -----------------
x <- 1:10
names(x) <- LETTERS[1:10]
class(x)
x[1:10]
x[c("A", "B")]
class(x)
## R - Base Types
# numeric -----------------
x <- 1:10
class(x)
class(x)
# uNames----------------
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
x["A"]
# uNames----------------
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
# uNames2----------------
# check for unique names
anyDuplicated(names(x))
# uNames----------------
# All vectors can have missing values.
# Note: names of vectors does not need to be unique. This can lead to subsetting problems:
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
# uNames2----------------
# check for unique names
anyDuplicated(names(x))
anyDuplicated(names(x))
names(x) <- c("A", "B", "C")
anyDuplicated(names(x))
names(x) <- c("A", "B", "C")
names(x) <- c("A", "B", "C")
anyDuplicated(names(x))
unique(x)
# uNames----------------
# All vectors can have missing values.
# Note: names of vectors does not need to be unique. This can lead to subsetting problems:
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
unique(x)
x <- 1:3
class(x)
unique(x)
duplicated(x)
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
# uNames----------------
# All vectors can have missing values.
# Note: names of vectors does not need to be unique. This can lead to subsetting problems:
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
duplicated(x)
duplicated(names(x))
duplicated(names(x))
unique(names(x))
# machine-------------
.Machine$integer.max
integer.max
# machine-------------
.Machine$integer.max
2^31 -1 == .Machine$integer.max
round(.Machine$integer.max / 10^6, 1)
# intNum-----------------
x <- 1
class(x)
x <- 1:3
class(x)
x
# intNum2----------------
x <- 1L
class(x)
as.numeric(x)
class(x)
as.numeric(x)
# matrices----------------
x <- matrix(1:9, ncol = 3, nrow = 3)
## IRanges
# IRanges construction with different start, end and width combinations----
ir1 <- IRanges(start = c(1,3,5), end = c(3,5,7))
# Load required packages
library(IRanges)
library(plyranges)
## IRanges
# IRanges construction with different start, end and width combinations----
ir1 <- IRanges(start = c(1,3,5), end = c(3,5,7))
ir1
ir2 <- IRanges(start = c(1,3,5), width = 3)
ir2
all.equal(ir1, ir2)
ir1 == ir2
ir1 == ir2
ir3 <- IRanges(start = 1:10, width = 10:1)
ir3
