?usethis
?usethis
library(usethis)
use_git_config(user.name = "r1ridwan", user.email = "ridwan.nstu@gmail.com")
create_github_token()
gitcreds::gitcreds_set()
setwd("G:/GIT")
setwd("G:/GIT/R-programming")
getwd()
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
emp.data
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
)
emp.data
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
)
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27"))
)
emp.data
emp_name
# Get the structure of the data frame.
str(emp.data)
# Get the summary of data frame
summary(emp.data)
print(summary(emp.data)) # Print the summary.
# Extract Specific columns.
result <- data.frame(emp.data$emp_name,emp.data$salary)
result
result <- emp.data[1:2,] # Extract first two rows.
print(result)
emp.data
print(result)
emp.data(c($emp_name))
emp.data($emp.data)
emp.data$emp_id$emp_name
# Extract Specific columns
result <- data.frame(emp.data$emp_name,emp.data$salary)
result
emp.data
# extract first 3 columns with all the rows
emp.data[,1:3]
# Extract first two rows
emp.data[1:2,]
# extract first 3 columns with all the rows
emp.data[,1:3]
emp.data
# New Column Addition/ Add the "dept" column
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
v <- emp.data
print(v)
emp.data
emp.data.new <- emp.data
emp.data.new
# Create a Vector called DESIGNATION and Adding as a New Colum
emp.data$designation<-c("Entry level","Manager","Technical specialist","Entry level","Senior Level")
emp.data
emp.data
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
emp.data
# Add new column by using cbind() function
designation <- c ("Entry level","Manager","Technical specialist","Entry level","Senior Level")
designation <- c ("Entry level","Manager","Technical specialist","Entry level","Senior Level")
designation
emp.table <- cbind(emp.data,designation)
emp.table
dept <- c("IT","Operations","IT","HR","Finance")
emp.table <- cbind(emp.data,dept,designation)
emp.table
# Create the second data frame/ To add more rows permanently to an existing data frame, we need to bring in the new rows
#in the same structure as the existing data frame and use the rbind() function.
#In the example below we create a data frame with new rows and merge it with the existing data frame to create the final data frame.
emp.newdata <- 	data.frame(
emp_id = c (6:8),
emp_name = c("Rasmi","Pranab","Tusar"),
salary = c(578.0,722.5,632.8),
start_date = as.Date(c("2013-05-21","2013-07-30","2014-06-17")),
dept = c("IT","Operations","Fianance"),
stringsAsFactors = FALSE
)
emp.newdata
emp.finaldata <- rbind(emp.data,emp.newdata) # Bind the two data frames using rbind()
emp.finaldata <- rbind(emp.data,emp.newdata) # Bind the two data frames using rbind()
print(emp.finaldata)
emp.finaldata <- rbind(emp.data,emp.newdata) # Bind the two data frames using rbind()
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
emp.data
emp.finaldata <- rbind(emp.data,emp.newdata) # Bind the two data frames using rbind()
print(emp.finaldata)
# 2. Create Data Frame
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
emp.data
# Create the second data frame/ To add more rows permanently to an existing data frame, we need to bring in the new rows
#in the same structure as the existing data frame and use the rbind() function.
#In the example below we create a data frame with new rows and merge it with the existing data frame to create the final data frame.
emp.newdata <- 	data.frame(
emp_id = c (6:8),
emp_name = c("Rasmi","Pranab","Tusar"),
salary = c(578.0,722.5,632.8),
start_date = as.Date(c("2013-05-21","2013-07-30","2014-06-17")),
dept = c("IT","Operations","Fianance"),
stringsAsFactors = FALSE
)
emp.newdata
# New Column Addition
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
emp.data.new <- emp.data
emp.data.new
emp.finaldata <- rbind(emp.data,emp.newdata) # Bind the two data frames using rbind()
print(emp.finaldata)
# 3. Create New Data frame
students_df<-data.frame(
Subjects=c("Math", "English", "Bangla", "Science", "Sociology", "Islam" ),
Percentage=c("90", "80", "97", "100", "87", "99")
)
students_df
row.names(students_df)<-c("A", "B", "C", "D", "E", "F")
students_df
# Rename the data frame
names(students_df)<-c("Course","Score")
students_df
library(MASS)
library(reshape2)
install.packages("reshape2")
library(reshape2)
install.packages("reshape")
library(reshape)
MASS
shipdata<-(head(ships,n=10))
shipdata
molten.ships <- melt(shipdata, id = c("type","year")) #Melting function
molten.ships
recasted.ship <- cast(molten.ships, type+year~variable,sum) #Casting function
recasted.ship
shipdata
molten.ships <- melt(shipdata, id = c("type","year"))
molten.ships
# Sample data frame (wide format)
wide_data <- data.frame(
ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"),
Math = c(85, 78, 90),
Science = c(75, 80, 88),
English = c(92, 85, 78)
)
wide_data
wide_data
# Melting the data frame to long format
long_data <- melt(wide_data, id.vars = c("ID", "Name"),
variable.name = "Subject", value.name = "Score")
# Melting the data frame to long format
long_data <- melt(wide_data, id.vars = c("ID", "Name"),
variable.name = "Subject", value.name = "Score")
long_data
# Sample data frame (long format)
long_data <- data.frame(
ID = c(1, 1, 2, 2, 3, 3),
Name = c("Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"),
Subject = c("Math", "Science", "Math", "Science", "Math", "Science"),
Score = c(85, 75, 78, 80, 90, 88)
)
long_data
# Casting the data frame to wide format
wide_data <- dcast(long_data, ID + Name ~ Subject, value.var = "Score")
wide_data
long_data
row.names(data) <- c( "TP53", "SEZ6L", "MICALL1")
# CREATE A DATAFRAME OF THREE GENES WITH DIFFERENT VALUES
data = data.frame(
C1 = c(1887.7, 9.9, 236.4), C2=c(8.1, 8.9, 8.4), C3=c(1799.6, 7.7, 220.9),
P1 = c(800.2, 400.1, 127.8), P2 = c(785.3, 389.3, 156.3), P3 = c(800.4, 403.9, 140.2)
)
row.names(data) <- c( "TP53", "SEZ6L", "MICALL1")
data
# Sample data frame (wide format)
wide_data <- data.frame(
ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"),
Math = c(85, 78, 90),
Science = c(75, 80, 88),
English = c(92, 85, 78)
)
# Sample data frame (wide format)
wide_data <- data.frame(
ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"),
Math = c(85, 78, 90),
Science = c(75, 80, 88),
English = c(92, 85, 78)
)
# Reshaping to long format
long_data <- pivot_longer(wide_data, cols = c(Math, Science, English),
names_to = "Subject", values_to = "Score")
long_data
source("G:/GIT/R-programming/long_wide_data_transformation.R", echo=TRUE)
# Sample data frame (wide format)
wide_data <- data.frame(
ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"),
Math = c(85, 78, 90),
Science = c(75, 80, 88),
English = c(92, 85, 78)
)
wide_data
## 2. pivot_longer() and pivot_wider() to reshape data frames
# Load packages
library(tidyr)
wide_data
# Reshaping to long format
long_data <- pivot_longer(wide_data, cols = c(Math, Science, English),
names_to = "Subject", values_to = "Score")
long_data
# pivot_wider() function is used to reshape data from long to wide format
# Sample data frame (long format)
long_data <- data.frame(
ID = c(1, 1, 2, 2, 3, 3),
Name = c("Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"),
Subject = c("Math", "Science", "Math", "Science", "Math", "Science"),
Score = c(85, 75, 78, 80, 90, 88)
)
# Reshaping to wide format
wide_data <- pivot_wider(long_data, names_from = Subject, values_from = Score)
wide_data
# pivot_wider() function is used to reshape data from long to wide format
# Sample data frame (long format)
long_data <- data.frame(
ID = c(1, 1, 2, 2, 3, 3),
Name = c("Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"),
Subject = c("Math", "Science", "Math", "Science", "Math", "Science"),
Score = c(85, 75, 78, 80, 90, 88)
)
long_data
# Reshaping to wide format
wide_data <- pivot_wider(long_data, names_from = Subject, values_from = Score)
wide_data
# as.character(): Converts the input to character data type
x <- 10
y <- as.character(x)
class(y)
class(x)
# as.character(): Converts the input to character data type
x <- c(12, 12, 134)
y <- as.character(x)
class(y)
x
# 2. as.numeric(): Converts the input to numeric data typ
# character to numeric
x <- c("10", "11", "12")
y <- as.numeric(x)
class(y)
class(x)
# 3. as.integer(): Converts the input to integer data type
x <- 10.5
class(x)
y <- as.integer(x)
class(y)
# 4. as.logical(): Converts the input to logical (boolean) data type
# numeric to logical
x <- 0
y <- as.logical(x)
class(y)
class(x)
# 4. as.logical(): Converts the input to logical (boolean) data type
# numeric to logical
x <- 0
class(x)
# 5. as.factor(): Converts the input to a factor data type
x <- c("Male", "Female", "Male")
class(x)
y <- as.factor(x)
class(y)
# 6. as.list(): Converts the input to a list
x <- c(1, 2, 3)
class(x)
class(y)
data <- gapminder
library(gapminder)
data <- gapminder
data
setwd("G:/CHIRAL R_For_Bioinforamtics_Training/data")
("data/Life_Expectancy_Wide.xlsx")
wide_data
View(wide_data)
setwd("G:/GIT/R-programming")
# 7. reshaping data
wide_data <- import("data/Life_Expectancy_Wide.xlsx")
# subset by logical condition
vector <- c(10, 20, 30, 50, 60)
vector[vector > 30]
# subset by logical condition
vector <- c(10, 20, 30, 40, 50, 60)
vector[vector > 30]
vector[vector < 30]
vector[[2]]
vector[2]
# Create a list with different elements
my_list <- list(
name = "Md Ridwan Ahmed", # character value
age = 30, # Numeric value
is_student = TRUE, # Logical value
scores = c(90, 85, 92), # Numeric vector
matrix_data =  matrix(1:6, nrow = 2, byrow = T), # Matrix
sub_list = list(a = 10, b = c("x", "y", "z")) # Nested list
)
my_list
my_list[2:3]
mat <- matrix(1:9, ncol = 3, nrow = 3, byrow = T)
mat
# Sub-setting elements
mat[2,1]
mat
num <- 10
# if statement
if(condition) {
# inside if block ~ do something
}
if (num < 10) {
print("Negative number")
}
num <- 10
# if statement
if(condition) {
# inside if block ~ do something
}
if (num < 10) {
print("Negative number")
}
num <- 10
print("Negative number")
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
num <- 10
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 10) {
print("Negative number")
}
# else statement
if(condition) {
# if block ~ do something
} else {
# else block ~ do something
}
