print("Negative number")
}
num <- 10
print("Negative number")
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
num <- 10
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 10) {
print("Negative number")
}
# else statement
if(condition) {
# if block ~ do something
} else {
# else block ~ do something
}
# 1. Conditional logic
num <- 10
if (num < 10) {
print("Negative number")
}
# 1. Conditional logic
num <- 9
# if statement
if(condition) {
# code to execute if condition is TRUE
}
if (num < 10) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
if (num < 0) {
print("Negative number")
}
# 1. Conditional logic
num <- -9
if (num < 0) {
print("Negative number")
}
if(num < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
# 1. Conditional logic
num <- 9
if(num < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
num2 <- 6
if(num2 < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
if(num2 < 0) {
print("Negative Number")
} else {
print("Positive Number")
}
# ifelse application
ages <- c(22, 11, 12, 23, 24, 54, 23, 34)
# ifelse() function
x <- 10
ifelse(x < 0, "negative", "Postive")
# ifelse application
ages <- c(22, 11, 12, 23, 24, 54, 23, 34)
ifelse(ages < 18, "Child", "Adult")
# ifelse application
ages <- c(22, 11, 12, 23, 24, 54, 23, 14)
ifelse(ages < 18, "Child", "Adult")
ifelse(qol_score < 50, "Poor", "Good")
bmi <- 25
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 18
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 25
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 24
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 25
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
bmi <- 30
if(bmi < 18.5) {
print("Underweight")
} else if(bmi >= 18.5 && bmi < 25) {
print("Normal weight")
} else if ( bmi >= 25 && bmi < 30) {
print("Over weight")
} else {
print("Obese")
}
# Handling missing values with ifelse
x <- c(1, 2, NA, 4, 5)
result <- ifelse(is.na(x), "Missing values", ifelse(x > 3, "Greater", "less or equeal"))
result
result
result
# Handling missing values with ifelse
x <- c(1, 2, NA, 3, 4, 5)
result <- ifelse(is.na(x), "Missing values", ifelse(x > 3, "Greater", "less or equeal"))
result
# Handling missing values with ifelse
x <- c(1, 2, NA, 3, 4, 5)
result <- ifelse(is.na(x), "Missing values", ifelse(x > 3, "Greater", "less or equeal"))
result
# Load packages
library(tidyverse)
library(GEOquery)
library(GEOquery)
library(ggpubr)
library(ggpubr)
# read data
data <- read.csv("GSE183947_fpkm.csv")
setwd("G:/CHIRAL R_For_Bioinforamtics_Training/bulkRNASeq/01_RNASeq_Manipulation")
# read data
data <- read.csv("GSE183947_fpkm.csv")
dim(data)
# read data
data <- read.csv("GSE183947_fpkm.csv")
data
View(data)
metadata <- pData(phenoData(ges[[1]]))
head(metadata)
metadata <- pData(phenoData(ges[[1]]))
# get metadata
ges <- getGEO(GEO = "GSE183947", GSEMatrix = TRUE)
ges
metadata <- pData(phenoData(ges[[1]]))
head(metadata)
metadata <- pData(phenoData(ges[[1]]))
View(ges)
View(metadata)
metadata_subset <- select(metadata, c(1, 10, 11, 17))
View(metadata_subset)
setwd("G:/GIT/R-programming")
# load packages
library(tidyverse)
# load packages
library(tidyverse)
library(airway)
# Install required
BiocManager::install("airway")
library(DESeq2)
library(EnhancedVolcano)
BiocManager::install("DESeq2")
BiocManager::install("EnhancedVolcano")
library(DESeq2)
library(EnhancedVolcano)
library(EnhancedVolcano)
# get info about data
?airway
# get info about data
?airway
library(airway)
# load packages
library(tidyverse)
# get info about data
?airway
# get data
# 1. count table ~ expression level
data(airway)
View(airway)
class(airway)
View(airway)
# extract count data
counts_data <- assay(airway)
View(counts_data)
View(counts_data)
# 2. metadata ~ sample information
col_data <- as.data.frame(colData(airway))
View(col_data)
View(counts_data)
View(counts_data)
View(col_data)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
View(counts_data)
View(col_data)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano)
# load packages
library(tidyverse)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
col_data
View(col_data)
col_data$dexamethasone <- gsub('trt', 'treated', col_data$dexamethasone)
View(col_data)
col_data$dexamethasone <- gsub('untrt', 'untreated', col_data$dexamethasone)
col_data
# making sure the row names in col_data matches to column names in counts_data
all(colnames(counts_data) %in% rownames(col_data))
# are they in the same order?
all(colnames(counts_data) == rownames(col_data))
View(counts_data)
View(counts_data)
# Step 2: construct a DESeqDataSetFromMatrix data object
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = col_data,
design = ~dexamethasone)
View(dds)
dds
# load packages
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano)
# get info about data
?airway
# get data
# 1. count table ~ expression level
data(airway)
# get data
# 1. count table ~ expression level
data(airway)
airway
class(airway)
# extract count data
counts_data <- assay(airway)
# extract count data
counts_data <- assay(airway)
# 2. metadata ~ sample information
col_data <- as.data.frame(colData(airway))
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
col_data$dexamethasone <- gsub('trt', 'treated', col_data$dexamethasone)
col_data$dexamethasone <- gsub('untrt', 'untreated', col_data$dexamethasone)
col_data
# making sure the row names in col_data matches to column names in counts_data
all(colnames(counts_data) %in% rownames(col_data))
# are they in the same order?
all(colnames(counts_data) == rownames(col_data))
# Step 2: construct a DESeqDataSetFromMatrix data object
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = col_data,
design = ~dexamethasone)
View(dds)
View(counts_data)
# pre-filtering: removing rows with low gene counts
# keep rows that have at least 10 reads total
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# reference category ~ set the factor level
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")
# Step 3. Run DESeq2
dds <- DESeq(dds)
# save as result
res <- results(dds)
res
# exploring results
summary(res)
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)
resultsNames(dds)
# contrast
contrast_res <- results(dds, contrast = c("dexamethasone", "treated", "untreated"))
contrast_res
plotMA(dds)
dds <- makeExampleDESeqDataSet(n=10000,m=18)
View(dds)
dds
getwd()
# load packages
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano)
# get info about data
?airway
# get data
# 1. count table ~ expression level
data(airway)
# get data
# 1. count table ~ expression level
data(airway)
airway
airway
class(airway)
# extract count data
counts_data <- assay(airway)
counts_data
head(counts_data)
# script to get data from airway package
data(airway)
airway
as.data.frame(colData(airway))
sample_info <- as.data.frame(colData(airway))
sample_info
sample_info <- sample_info[,c(2,3)]
sample_info
# script to get data from airway package
data(airway)
View(airway)
airway
sample_info <- as.data.frame(colData(airway))
sample_info <- sample_info[,c(2,3)]
sample_info <- sample_info[,c(2,3)]
sample_info <- sample_info[,c(2,3)]
sample_info
sample_info <- as.data.frame(colData(airway))
sample_info <- sample_info[,c(2,3)]
sample_info
sample_info <- as.data.frame(colData(airway))
sample_info
sample_info <- sample_info[,c(2,3)]
sample_info
sample_info <- as.data.frame(colData(airway))
View(sample_info)
sample_info <- sample_info[,c(2,3)]
sample_info$dex <- gsub('trt', 'treated', sample_info$dex)
sample_info$dex <- gsub('untrt', 'untreated', sample_info$dex)
names(sample_info) <- c('cellLine', 'dexamethasone')
sample_info
write.table(sample_info, file = "sample_info.csv", sep = ',', col.names = T, row.names = T, quote = F)
setwd("G:/GIT/R-programming/DESeq2")
write.table(countsData, file = "counts_data.csv", sep = ',',
col.names = T, row.names = T, quote = F)
countsData <- assay(airway)
write.table(countsData, file = "counts_data.csv", sep = ',',
col.names = T, row.names = T, quote = F)
airway
setwd("G:/GIT/R-programming/DESeq2")
# load packages
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano)
library(DESeq2)
# get info about data
?airway
# get data
# 1. count table ~ expression level
data(airway)
airway
class(airway)
# extract count data
counts_data <- assay(airway)
View(counts_data)
head(counts_data)
# 2. metadata ~ sample information
col_data <- as.data.frame(colData(airway))
col_data
colData(airway))
as.data.frame(colData(airway))
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dex = dexamethasone) |>
rename(cellline = cell)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
col_data$dexamethasone <- gsub('trt', 'treated', col_data$dexamethasone)
col_data
col_data
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
# get info about data
?airway
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano)
# get info about data
?airway
# extract count data
counts_data <- assay(airway)
head(counts_data)
# 2. metadata ~ sample information
col_data <- as.data.frame(colData(airway))
# Step 1. Preparing data
col_data <- col_data |>
select(c(2,3)) |>
rename(dexamethasone = dex) |>
rename(cellline = cell)
col_data$dexamethasone <- gsub('trt', 'treated', col_data$dexamethasone)
col_data$dexamethasone <- gsub('untrt', 'untreated', col_data$dexamethasone)
col_data
View(col_data)
View(col_data)
View(counts_data)
# making sure the row names in col_data matches to column names in counts_data
all(colnames(counts_data) %in% rownames(col_data))
# are they in the same order?
all(colnames(counts_data) == rownames(col_data))
# Step 2: construct a DESeqDataSetFromMatrix data object
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = col_data,
design = ~dexamethasone)
dds
dds
# pre-filtering: removing rows with low gene counts
# keep rows that have at least 10 reads total
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
dds
# Step 3. Run DESeq2
dds <- DESeq(dds)
# save as result
res <- results(dds)
res
# exploring results
summary(res)
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)
summary(res0.01)
resultsNames(dds)
plotMA(dds)
makeExampleDESeqDataSet(n=10000,m=6)
library(tidyverse)
library(airway)
library(DESeq2)
library(EnhancedVolcano
makeExampleDESeqDataSet(n=10000,m=6)
makeExampleDESeqDataSet
dds<- makeExampleDESeqDataSet(n=10000,m=6)
dds
assay(dds)[ 1:10,]
