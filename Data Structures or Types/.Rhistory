print(combined)
v <- 5:13
print(v)
v <- 3.8:11.4
print(v)
print(seq(5,9, by=0.4))#Create vector with elements from 5 to 9 incrementing by 0.4
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")#Accessing vector elements using position
u <- t[c(3,1,7)]
print(u)
v<- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)] # Accessing vector elements using logical indexing
print(v)
y <- t[c(1,0,0,0,0,0,7)]# Accessing vector elements using 0/1 indexing.
print(y)
v<- c(3,8,4,5,0,11, -9, 304)
sort.result<- sort(v)
print(sort.result)
revsort.result<- sort(v, decreasing = TRUE)
print(revsort.result)
revsort.result<- sort(v, increasing = TRUE)
revsort.result<- sort(v, decreasing = TRUE)
revsort.result<- sort(v, decreasing = FALSE)
print(revsort.result)
------------------------------------------------------
v<-c("Blue", "Red", "Yellow", "violet", "Green")
------------------------------------------------------
v<-c("Blue", "Red", "Yellow", "violet", "Green")
------------------------------------------------------
A<-c("Blue", "Red", "Yellow", "violet", "Green")
------------------------------------------------------
A <- c("Blue", "Red", "Yellow", "violet", "Green")
------------------------------------------------------
v <- c("Blue", "Red", "Yellow", "violet", "Green")
-----------------------------------------------------
v <- c('Blue', 'Red', 'Yellow', 'violet', 'Green')
------------------------------------------------------
v <- c("Blue", "Red", "Yellow", "violet", "Green")
v[c(4, 6, 1)]
v[c(2,3,4)]
v[c(2,3,4)]
#Sample Vector
v <- c(1,4,4,3,2,2,3)
v[c(2,3,4)]
#Sample Vector
v <- c(1,4,4,3,2,2,3)
v[c(2,3,4)]
v[1:2]
v[5:6]
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
t[c(3,1,7)]
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")#Accessing vector elements using position
v<- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)] # Accessing vector elements using logical indexing
print(v)
y <- t[c(1,0,0,0,0,0,7)]# Accessing vector elements using 0/1 indexing.
print(y)
# Create a sample data frame
data <- read.table(header=T, text='
subject sex size
1   M    7
2   F    6
3   F    9
4   M   11
')
View(data)
data2 <- read.table(header=T, text = '
Subject sex  size
1   M     7
2   F     8')
View(data2)
data2 <- read.table(header=, text = '
Subject sex  size
1   M     7
2   F     8')
View(data2)
data2 <- read.table(header=TRUE, text = '
Subject sex  size
1   M     7
2   F     8')
data2 <- read.table(header=TRUE, text = '
Subject Sex  Size
1   M     7
2   F     8')
data[1, 3]
data[3, 2]
dat[1, "size"]
# Create a sample data frame
data <- read.table(header=T, text='
subject sex size
1   M    7
2   F    6
3   F    9
4   M   11
')
dat[1, "size"]
data[1, "size"]
data[1:2, ]
data[c(1,2), ]
data[1:2, c(2,3)]
data[c(1,2), c("sex", "size")]
data[c(1,2), c(2,3)]
v>2
v > 2
v <- c(1,4,4,3,2,2,3)
v > 2
v[v>2]
v[c(F,T,T,T,F,F,T)]
data <- read.table(header=T, text='
subject sex size
1   M    7
2   F    6
3   F    9
4   M   11
')
data$subject <3
data[data$subject<3, ]
data[c(T, T, F, F), ]
# It is also possible to get the numeric indices of the TRUEs
which(data$subject<3)
which[c(data$subject<3), ]
# It is also possible to get the numeric indices of the TRUEs
which(data$sex<3)
# It is also possible to get the numeric indices of the TRUEs
which(data$size<3)
# It is also possible to get the numeric indices of the TRUEs
which(data$size<3)
# It is also possible to get the numeric indices of the TRUEs
which(data$subject < 3)
v
v[-1]
v[-2]
v[-4]
#Drop the first three
v[-1:-3]
#Drop the just last element
v[-length(v)]
n = 10:14
n
n
class(n)
n
class(n)
#integer to character
c = as.character(n)
n
class(n)
#integer to character
c = as.character(n)
class(n)
n
class(n)
#integer to character
c = as.character(n)
class(c)
n
class(n)
#integer to character
c = as.character(n)
class(c)
c
n
class(n)
#integer to character
c = as.character(n)
class(c)
f = as.factor(c)
n
class(n)
#integer to character
c = as.character(n)
class(c)
f = as.factor(c)
class(f)
n
class(n)
#integer to character
c = as.character(n)
class(c)
f = as.factor(c)
class(f)
f
class(data$country)
```
# Convert between numeric vectors, character vectors, and factors.
```
# Define a vector
n = 10:14
class(n)
[1] "integer"
# integer to character
c = as.character(n)
class(c)
[1] "character"
# Character to factor
f = as.factor(c)
class(f)
[1] "factor"
```
# character to numeric
as.numeric(c)
class(data$country)
```
# Convert between numeric vectors, character vectors, and factors.
```
# Define a vector
n = 10:14
class(n)
[1] "integer"
# integer to character
c = as.character(n)
class(c)
[1] "character"
# Character to factor
f = as.factor(c)
class(f)
[1] "factor"
```
# character to numeric
as.numeric(c)
c
class(data$country)
```
# Convert between numeric vectors, character vectors, and factors.
```
# Define a vector
n = 10:14
class(n)
[1] "integer"
# integer to character
c = as.character(n)
class(c)
[1] "character"
# Character to factor
f = as.factor(c)
class(f)
[1] "factor"
```
# character to numeric
as.numeric(c)
c
class(c)
class(data$country)
```
# Convert between numeric vectors, character vectors, and factors.
```
# Define a vector
n = 10:14
class(n)
[1] "integer"
# integer to character
c = as.character(n)
class(c)
[1] "character"
# Character to factor
f = as.factor(c)
class(f)
[1] "factor"
```
# character to numeric
as.numeric(c)
c
class(c)
class(data$country)
```
# Convert between numeric vectors, character vectors, and factors.
```
# Define a vector
n = 10:14
class(n)
[1] "integer"
# integer to character
c = as.character(n)
class(c)
[1] "character"
# Character to factor
f = as.factor(c)
class(f)
[1] "factor"
```
# character to numeric
t = as.numeric(c)
c
class(c)
class(data$country)
```
# Convert between numeric vectors, character vectors, and factors.
```
# Define a vector
n = 10:14
class(n)
[1] "integer"
# integer to character
c = as.character(n)
class(c)
[1] "character"
# Character to factor
f = as.factor(c)
class(f)
[1] "factor"
```
# character to numeric
t = as.numeric(c)
c
class(t)
# character to factor
y = as.factor(t)
# character to factor
y = as.factor(t)
t
# character to factor
y = as.factor(t)
t
class(y)
