subsetByOverlaps(airway, gr)
## ----subsetByOverlaps----------------------------------------------------
gr <- GRanges(seqnames = "1", ranges = IRanges(start = 1, end = 10^7))
subsetByOverlaps(airway, gr)
start(airway)
BiocManager::install("GEQquery")
BiocManager::install("biomaRt")
library(biomaRt)
library(biomaRt)
library(GEOquery)
BiocManager::install("GEQquery")
library(GEOquery)
library(GEOquery)
library(GEOquery)
library(biomaRt)
## ----listMarts-----------------------------------------------------------
head(listMarts())
mart <- useMart("ensembl")
mart
library(GEOquery)
BiocManager::install("GEQquery")
library(GEOquery)
library(GEOquery)
BiocManager::install("GEQquery")
library(GEOquery)
## ----getData-------------------------------------------------------------
eList <- getGEO("GSE11675")
## ----getData-------------------------------------------------------------
eList <- getGEO("GSE11675")
class(eList)
library(GEOquery)
BiocManager::install("GEQquery", force = TRUE)
library(GEOquery)
BiocManager::install("GEQquery", force = TRUE)
library(GEOquery)
## ----getData-------------------------------------------------------------
eList <- getGEO("GSE11675")
library(biomaRt)
library(GEOquery)
BiocManager::install("GEQquery")
library(GEOquery)
library(GEOquery)
BiocManager::install("GEQquery")
library(GEOquery)
R
## ----getData-------------------------------------------------------------
eList <- getGEO("GSE11675")
R
version
library(GEOquery)
library(GEOquery)
BiocManager::install("GEQquery" )
packageVersion("BiocManager")
tools:::.BioC_version_associated_with_R_version()
tools:::.BioC_version_associated_with_R_version()
packageVersion("GEOquery")
BiocManager::install("GEOquery")
library(GEOquery)
## ----getData-------------------------------------------------------------
eList <- getGEO("GSE11675")
library(GEOquery)
## ----getData-------------------------------------------------------------
eList <- getGEO("GSE11675")
class(eList)
length(eList)
names(eList)
eData <- eList[[1]]
eData
## ----pData---------------------------------------------------------------
names(pData(eData))
eData$title
eData$geo_accession
eData$submission_date
## ----pData---------------------------------------------------------------
names(pData(eData))
eData$type
## ----getGEOsupp----------------------------------------------------------
eList2 <- getGEOSuppFiles("GSE11675")
eList2
tarArchive <- rownames(eList2)[1]
tarArchive
library(biomaRt)
## ----listMarts-----------------------------------------------------------
head(listMarts())
mart <- useMart("ensembl")
mart
head(listDatasets(mart))
ensembl <- useDataset("hsapiens_gene_ensembl", mart)
ensembl
ensembl
ensembl <- useDataset("hsapiens_gene_ensembl", mart)[1:10]
ensembl
ensembl <- useDataset("hsapiens_gene_ensembl", mart)[1:10, ]
ensembl
head(listDatasets(mart))[1:10, ]
head(listDatasets(mart))[1:10]
head(listDatasets(mart))[1:10, ]
listDatasets(mart)
ensembl
listDatasets(mart)[1:20,]
listDatasets(mart)["hsapiens_gene_ensembl"]
listDatasets(mart)
ensembl
ensembl <- useDataset("hsapiens_gene_ensembl", mart)
ensembl
ensembl
## ----getBMex-------------------------------------------------------------
values <- c("202763_at","209310_s_at","207500_at")
getBM(attributes = c("ensembl_gene_id", "affy_hg_u133_plus_2"),
filters = "affy_hg_u133_plus_2", values = values, mart = ensembl)
getBM(attributes = c("ensembl_gene_id", "affy_hg_u133_plus_2"),
filters = "affy_hg_u133_plus_2", values = values, mart = ensembl)
## ----listAttributes------------------------------------------------------
attributes <- listAttributes(ensembl)
head(attributes)
nrow(attributes)
filters <- listFilters(ensembl)
head(filters)
nrow(filters)
head(filters)
tail(attributes)
tail(attributes, n=500)
nrow(attributes)
## ----listPages-----------------------------------------------------------
attributePages(ensembl)
attributes <- listAttributes(ensembl, page = "feature_page")
head(attributes)
nrow(attributes)
attributes <- listAttributes(ensembl, page = "structure")
attributes
nrow(attributes)
nrow(attributes)
## ----listPages-----------------------------------------------------------
attributePages(ensembl)
attributes <- listAttributes(ensembl, page = "homologs")
attributes
nrow(attributes)
## ----listPages-----------------------------------------------------------
attributePages(ensembl)
attributes <- listAttributes(ensembl, page = "sequences")
attributes
nrow(attributes)
## ----dependencies, warning=FALSE, message=FALSE--------------------------
library(ALL)
library(GenomicRanges)
## ----dependencies, warning=FALSE, message=FALSE--------------------------
library(ALL)
## ----lm------------------------------------------------------------------
df <- data.frame(y = rnorm(10), x = rnorm(10))
lm.object <- lm(y ~ x, data = df)
lm.object
names(lm.object)
class(lm.object)
## ----lm2-----------------------------------------------------------------
xx <- list(a = letters[1:3], b = rnorm(3))
xx
class(xx) <- "lm"
xx
## ----ALL-----------------------------------------------------------------
library(ALL)
data(ALL)
ALL
class(ALL)
isS4(ALL)
## ----help, eval=FALSE----------------------------------------------------
?"ExpressionSet-class"
class?ExpressionSet
## ----dependencies, warning=FALSE, message=FALSE--------------------------
library(ShortRead)
## ----fastq1--------------------------------------------------------------
fastqDir <- system.file("extdata", "E-MTAB-1147", package = "ShortRead")
fastqPath <- list.files(fastqDir, pattern = ".fastq.gz$", full = TRUE)[1]
reads <- readFastq(fastqPath)
reads
## ----fastq2--------------------------------------------------------------
fqFile <- FastqFile(fastqPath)
fqFile
reads <- readFastq(fqFile)
## ----accessorFastq-------------------------------------------------------
sread(reads)[1:2]
quality(reads)[1:2]
id(reads)[1:2]
fastqq <- readFastq(dirPath = "fasta/", pattern = "SRR1971253_pass.fastq")
fastqq <- readFastq(dirPath = "fasta/", pattern = "SRR1971253_pass.fastq")
#---------------------Read-Write-FASTA-FASTQ-File-------------------------------------------------
# Reading FASTA file S4 method-1 in fasta folder
fasample <- readFasta(dirPath = "fasta/", pattern = "fasta")
setwd("E:/Bioinformatics/Scripts/DataCamp/Intro to Bioconductor in R")
fastqq <- readFastq(dirPath = "fasta/", pattern = "SRR1971253_pass.fastq")
fastqq
sread(fastqq)[1:2]
ids(fastqq)
id(fastqq)
quality(fastqq)[1:2]
id(fastqq)[1:2]
as(quality(fastqq), "matrix")[1:10, 1:10]
quality(fasttq)
# Read FASTQ File in S4 method and check other functions (SRR1971253 SRA file was downloaded for analysis)
# Arabidopsis Thaliana plant SRA file used here
fasttq <- readFastq(dirPath = "fasta/", pattern = "fastq")
#==============================Sequence Quality====================================================
## Sequence Quality
# Endcoding sequence Quality or FASTQ sequence quality score
encoding(quality(fasttq))
quality(fasttq)
sread(fasttq)[1]
# Quality is represented as ASCII Characters
quality(fasttq)[1]
# Phred Quality Instance
qp <- PhredQuality(quality(fasttq))
# Transform encoding phredquality into scores (Score 30 is considered as good quality score)
qs <- as(qp, "IntegerList")
qs
#Convert Quality
as(quality(fastqq), "matrix")[1:10, 1:10]
#Convert Quality
as(quality(fastqq), "matrix")[1:2, 1:10]
## ----dependencies, warning=FALSE, message=FALSE--------------------------
library(Rsamtools)
## ----dependencies, warning=FALSE, message=FALSE--------------------------
library(Rsamtools)
library(BSgenome.Scerevisiae.UCSC.sacCer2)
library(BiocManager)
library(BSgenome)
library(Biostrings)
library(IRanges)
library(GenomicRanges)
library(dplyr)
library(tidyverse)
library(plyranges)
library(ShortRead)
library(Rqc)
library(AnnotationHub)
library(BSgenome.Scerevisiae.UCSC.sacCer2)
gr2 <- GRanges(seqnames = "chr1",
strand = c("+", "-", "*"),
ranges = IRanges(start = c(1, 3, 5), width = 3),
gene_id = c(10025, 10026, 10027),
score = c(10, 15, 12))
##----------GenomicRanges--------------------------------------------------------
library(BSgenome.Scerevisiae.UCSC.sacCer2)
subseq(chrM, start = 85769, width = 10)
#------------Get Chromosome M into an Object chrM and do some analysis--------------------
chrM <- yeast$chrM
length(chrM)
nchar(chrM)
sample(chrM)
#---------------------------seqinfo-Get-Sequence-Informations-------------------------
seqinfo(yeast)
yeast$chrI
#------------Get Chromosome M into an Object chrM and do some analysis--------------------
chrM <- yeast$chrM
subseq(chrM, start = 85769, width = 10)
##========Coursera======================================
##============Bioconductor for Genomic Data Science==================
## ----dependencies, warning=FALSE, message=FALSE--------------------------
## URL: http://kasperdanielhansen.github.io/genbioconductor/html/R_Base_Types.html
## ----numeric-------------------------------------------------------------
x <- 1:10
names(x) <- letters[1:10]
class(x)
x[1:3]
x[c("a", "b")]
names(x) <- LETTERS[1:10]
class(x)
x[1:3]
x[c("a", "b")]
x[c("A", "B")]
## ----uNames--------------------------------------------------------------
x <- 1:3
names(x) <- c("A", "A", "B")
x
x["A"]
## ----uNames2-------------------------------------------------------------
anyDuplicated(names(x))
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
## ----uNames--------------------------------------------------------------
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
## ----uNames2-------------------------------------------------------------
anyDuplicated(names(x))
## ----intNum--------------------------------------------------------------
x <- 1
class(x)
x <- 1:3
class(x)
## ----intNum2-------------------------------------------------------------
x <- 1L
class(x)
as.numeric(x)
## ----machine-------------------------------------------------------------
.Machine$integer.max
2^31 -1 == .Machine$integer.max
round(.Machine$integer.max / 10^6, 1)
## ----matrices------------------------------------------------------------
x <- matrix(1:9, ncol = 3, nrow = 3)
rownames(x) <- c("A","B","C")
rownames(x) <- LETTERS[1:3]
x
colnames(x) <- letters[1:3]
x
dim(x)
nrow(x)
ncol(x)
## ----matrices2-----------------------------------------------------------
#tow dimensional subsetting of matirces, [rownames, colnames]
x[1:2,]
x["B", ]
x[x >= 5]
x[x >= 5]
## ----matrixSubset2-------------------------------------------------------
x[1,]
x[1,,drop = FALSE]
x[1,,drop = FALSE]
## ----matrixSubset2-------------------------------------------------------
x[1,]
## ----matrixSubset2-------------------------------------------------------
x[1,]
x[A, ]
x["A", ]
x["A", , drop = FALSE] # it gives the output as a vector not as a matrix
## ----list----------------------------------------------------------------
x <- list(1:3, letters[1:3], is.numeric)
x
names(x) <- c("numbers", "letters", "function")
x[1:2]
x[1]
x[[1]]
x[1:2]
x[1]
x[[1]]
## ----list2---------------------------------------------------------------
x$letters
x["letters"]
x$let
x["let"]
## ----as.list-------------------------------------------------------------
as.list(1:3)
list(1:3)
## ----lapply--------------------------------------------------------------
x <- list(a = rnorm(3), b = rnorm(3))
lapply(x, mean)
## ----sapply--------------------------------------------------------------
sapply(x, mean)
library(GenomicRanges)
library(IRanges)
library(plyranges)
library(GenomeInfoDb)
library(AnnotationHub)
library(devtools)
library(rtracklayer)
## ----------Create-GRanges-Obejct-------------------------------------------------------------
gr <- GRanges(seqnames = "chr1", strand = c("+", "-", "+"),
ranges = IRanges(start = c(1,3,5), width = 3))
gr
gr2 <- GRanges(seqnames = "chr1",
strand = c("+", "-", "*"),
ranges = IRanges(start = c(1, 3, 5), width = 3),
gene_id = c(10025, 10026, 10027),
score = c(10, 15, 12))
gr2
gr3 <- GRanges(seqnames = c("chr1", "chr2", "chr3"),
strand = c("+", "-", "*"),
ranges = IRanges(start = c(1, 3, 5), width = 3),
gene_id = c(10025, 10026, 10027),
score = c(10, 15, 12))
gr3
##----------GenomicRanges--------------------------------------------------------
library(BSgenome.Scerevisiae.UCSC.sacCer2)
yeast <- BSgenome.Scerevisiae.UCSC.sacCer2
chrI <- yeast$chrI
(myGR <- GRanges("chrI:200-300"))
# Chromosome Nmaes
seqnames(myGR)
# IRanges object for ranges
ranges(myGR)
seqnames(yeast)
# Sequence Information
seqinfo(myGR)
# Get Genome Name
genome(myGR)
## ----flank---------------------------------------------------------------------------
flank(gr, 2) # Positive strand value shift left(decrease) and negative strand value shift right(increase)
## ----flank---------------------------------------------------------------------------
flank(gr, 2) # Positive strand value shift left(decrease) and negative strand value shift right(increase)
flank(gr, 3, start = FALSE) # Psitive strand value shift right (increase) and negative value shift left (decrease)
## ----------seqinfo-seqlengths-------------------------------------------------------------
seqinfo(gr2)
library(GenomicRanges)
library(IRanges)
library(plyranges)
library(GenomeInfoDb)
library(AnnotationHub)
library(devtools)
library(rtracklayer)
## ----annoHub,results="hide"----------------------------------------------
ah <- AnnotationHub()
library(AnnotationHub)
## ----annoHub,results="hide"----------------------------------------------
ah <- AnnotationHub()
library(AnnotationHub)
library(GenomeInfoDb)
library(AnnotationHub)
library(dplyr)
## ----annoHub,results="hide"----------------------------------------------
ah <- AnnotationHub()
ah
## ----no1-----------------------------------------------------------------
ah[1]
length(ah)
library(GenomicRanges)
library(IRanges)
library(plyranges)
library(GenomeInfoDb)
library(GenomeInfoDb)
library(AnnotationHub)
BiocManager::install("AnnotationHub")
library(AnnotationHub)
## ----annoHub,results="hide"----------------------------------------------
ah <- AnnotationHub()
library(AnnotationHub)
## ----annoHub,results="hide"----------------------------------------------
ah = AnnotationHub()
ah
length(ah)
BiocManager::install(version = "3.14")
## ----annoHub,results="hide"----------------------------------------------
ah = AnnotationHub()
library(BiocManager)
library(AnnotationHub)
## ----annoHub,results="hide"----------------------------------------------
ah = AnnotationHub()
library(GenomicRanges)
library(IRanges)
library(plyranges)
library(GenomeInfoDb)
library(AnnotationHub)
library(devtools)
library(rtracklayer)
library(dplyr)
## ----annoHub,results="hide"----------------------------------------------
ah = AnnotationHub()
ah
## ----numeric-------------------------------------------------------------
x <- 1:10
names(x) <- LETTERS[1:10]
class(x)
x[1:3]
x[1:10]
x[c("A", "B")]
x[c("A", "B")]
class(x)
## ----uNames--------------------------------------------------------------
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
## ----uNames--------------------------------------------------------------
x <- 1:10
names(x) <- c("A", "A", "B", "C", "E", "D", "C", "A", "B", "D")
x
x["A"]
## ----uNames2-------------------------------------------------------------
anyDuplicated(names(x))
names(x) <- c("A", "B", "C")
anyDuplicated(names(x))
library(GenomicRanges)
library(IRanges)
library(plyranges)
library(GenomeInfoDb)
library(AnnotationHub)
library(devtools)
library(rtracklayer)
library(dplyr)
library(BiocManager)
library(GenomicRanges)
library(IRanges)
library(plyranges)
library(GenomeInfoDb)
library(AnnotationHub)
library(devtools)
library(rtracklayer)
library(BSgenome)
## ----------Create-GRanges-Obejct-------------------------------------------------------------
gr <- GRanges(seqnames = "chr1", strand = c("+", "-", "+"),
ranges = IRanges(start = c(1,3,5), width = 3))
gr
gr2 <- GRanges(seqnames = "chr1",
strand = c("+", "-", "*"),
ranges = IRanges(start = c(1, 3, 5), width = 3),
gene_id = c(10025, 10026, 10027),
score = c(10, 15, 12))
gr2
gr3 <- GRanges(seqnames = c("chr1", "chr2", "chr3"),
strand = c("+", "-", "*"),
ranges = IRanges(start = c(1, 3, 5), width = 3),
gene_id = c(10025, 10026, 10027),
score = c(10, 15, 12))
gr3
library
library(BSgenome.Scerevisiae.UCSC.sacCer2)
yeast <- BSgenome.Scerevisiae.UCSC.sacCer2
seqnames(yeast)
chrI <- yeast$chrI
(myGR <- GRanges("chrI:200-300"))
# Get GenomicRanges Accessor
methods(class = "GRanges")
# Chromosome Nmaes
seqnames(myGR)
