v2<-c(4, 11)# v2 becomes (4,11,4,11,4,11,4)
add.result<- v1+v2
v2<-c(4, 11)
add.result<- v1+v2
v1 + v2
v2 + v1
v1 <- c(3, 4, 5, 6, 7, 8, 9)
v2 <-c(4, 11)
v2 + v1
add.result <- v1+v2
add.result <- v2 + v1
print(add.result)
sub.result <- v2 - v1
print(sub.result)
v2 + v1
print(v2 + v1)
#Get rows 1 and 2, and only the columns named "sex" and "size"
data[1:2, c(2,3)]
data[c(1,2), c("sex", "size")]
data[c(1,2), c(2,3)]
```
### Indexing with a boolean vector
with the vector v from above
```
v <- c(1,4,4,3,2,2,3)
v > 2
v[v>2]
v[c(F,T,T,T,F,F,T)]
```
With the data frame from the above
```
data$subject <3
data[data$subject<3, ]
data[c(T, T, F, F), ]
# It is also possible to get the numeric indices of the TRUEs
which(data$subject < 3)
```
#### Accessing vector elements using position
```
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
u <- t[c(3,1,7)]
print(u)
[1] "Tue" "Sun" "Sat"
```
#### Accessing vector elements using logical indexing
```
v<- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
print(v)
[1] "Sun" "Fri"
```
#### Accessing vector elements using 0/1 indexing.
```
y <- t[c(1,0,0,0,0,0,7)]
print(y)
[1] "Sun" "Sat"
#Get rows 1 and 2, and only the columns named "sex" and "size"
data[1:2, c(2,3)]
data[c(1,2), c("sex", "size")]
data[c(1,2), c(2,3)]
```
### Indexing with a boolean vector
with the vector v from above
```
v <- c(1,4,4,3,2,2,3)
v > 2
v[v>2]
v[c(F,T,T,T,F,F,T)]
```
With the data frame from the above
```
data$subject <3
data[data$subject<3, ]
data[c(T, T, F, F), ]
# It is also possible to get the numeric indices of the TRUEs
which(data$subject < 3)
```
#### Accessing vector elements using position
```
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
u <- t[c(3,1,7)]
print(u)
[1] "Tue" "Sun" "Sat"
```
#### Accessing vector elements using logical indexing
```
v<- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
print(v)
[1] "Sun" "Fri"
```
#### Accessing vector elements using 0/1 indexing.
```
y <- t[c(1,0,0,0,0,0,7)]
print(y)
[1] "Sun" "Sat"
# Named Vector Members
***We can assign names to vector members. For example, the following variable v is a character string vector with two members.***
v <- c("Mary", "Nishi")
# Named Vector Members
***We can assign names to vector members. For example, the following variable v is a character string vector with two members.***
v <- c("Mary", "Nishi")
names(v)= c("First", "Last")
# Named Vector Members
***We can assign names to vector members. For example, the following variable v is a character string vector with two members.***
v <- c("Mary", "Nishi")
names(v)= c("First", "Last")
v[First]
# Named Vector Members
***We can assign names to vector members. For example, the following variable v is a character string vector with two members.***
v <- c("Mary", "Nishi")
names(v)= c("First", "Last")
v["First"]
# Named Vector Members
***We can assign names to vector members. For example, the following variable v is a character string vector with two members.***
v <- c("Mary", "Nishi")
names(v)= c("First", "Last")
v["First"]
v["Last"]
# Named Vector Members
***We can assign names to vector members. For example, the following variable v is a character string vector with two members.***
v <- c("Mary", "Nishi")
names(v)= c("First", "Last")
v["First"]
v["Last"]
v[c("Last", "First")]
v = c(1,4,4,3,2,23)
v = c(1,4,4,3,2,2,3)
v = c(1,4,4,3,2,2,3)
subset (v, v<3)
v = c(1,4,4,3,2,2,3)
subset (v, v<3)
subset (v, v>3)
# Another vector
t <- c("small", "small", "large", "large")
# Another vector
t <- c("small", "small", "large", "large")
subset(t, t!="small")
# Another vector
t <- c("small", "small", "large", "medium")
subset(t, t!="small")
# Another vector
t <- c("small", "small", "large", "medium")
subset(t, t!="small")
# Another vector
t <- c("small", "small", "large", "medium")
subset(t, t!="small")
subset(t, t!="large")
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
View(BMI_df)
View(data)
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(dat, subject < 3)
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data2 = subset(data, subject < 3)
View(data2)
data[data$subject > 3, ]
data3 = data[data$subject > 3, ]
View(data3)
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
# Subset of particular rows and columns
subset(data, subject < 3, select = -subject)
# Subset of particular rows and columns
subset(data, subject < 3, select = -subject)
subset (data, subject < 3, select = c(sex, size))
# Subset of particular rows and columns
subset(data, subject < 3, select = -subject)
subset (data, subject < 3, select = c(sex, size))
data4 = subset(data, subject > 3, select = c(sex, size))
View(data4)
subset(data, subject<3, select=c(sex:size))
subset(data, subject<3, select=c(sex:size))
data[data$subject < 3, c("sex", "size")]
# Logical AND of two conditions
subset(data, subject <3 $ sex=="M")
With a data frame
```
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
# Logical AND of two conditions
subset(data, subject <3 $ sex=="M")
With a data frame
```
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
With a data frame
```
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
With a data frame
```
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
With a data frame
```
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
With a data frame
```
# A sample data frame
data = read.table(header = T, text = '
subject sex size
1     M   7
2     F   6
3     F   9
4     L   11
5     M   12')
subset(data, subject < 3)
data[data$subject < 3, ]
# Assigning data frame to new data2 frame with condition
data2 = subset(data, subject < 3)
data3 = data[data$subject > 3, ]
View(data2)
View(data3)
# Logical AND of two conditions
subset(data, subject <3 $ sex=="M")
data[data$subject < 3 & sex=="M", ]
# Logical AND of two conditions
subset(data, subject <3 $ sex=="M")
data[data$subject < 3 & data$sex=="M", ]
# Logical OR of two conditions
subset(data, subject < 3 | sex=="M")
# Logical OR of two conditions
subset(data, subject < 3 | sex=="M")
data[data$subject <3, | data$sex == "M", ]
# Logical OR of two conditions
subset(data, subject < 3 | sex=="M")
data[data$subject <3 | data$sex == "M", ]
# Condition based on transformed data
subset(data, log2(size) > 3)
# Condition based on transformed data
subset(data, log2(size) > 3)
data[log2(data$size) > 3, ]
# Subset if elements are in another vector
subset(data, subject %in% c(1,3))
subset(data, subject >3, size > 6)
da = subset(data, subject >3, size > 6)
View(da)
View(da)
vidw
View(da)
da = subset(data, subject >3 & size > 6)
View(da)
da = subset(data, subject > 3 & size > 6)
View(da)
View(data)
da = subset(data, subject < 3 & size > 6)
View(da)
View(data)
da = subset(data, subject < 3 & size > 6 & sex=="M")
View(da)
da = subset(data, subject > 3 & size > 6 & sex=="M")
View(da)
data5 = subset(data, subject > 3 & size > 6 & sex=="M")
View(data5)
getwd()
testtst =read.table(file = 'gene_set_Colorectal_cancer.2021-10-23.tsv', sep = '\t', header = TRUE)
View(testtst)
write.csv(testtst, file = "E:/Bioinformatics/Scripts/gene_set_Colorectal_cancer.2021-10-23.csv")
write.csv(testtst, file = "E:/Bioinformatics/Scripts/gene_set_Colorectal_cancer.2021-10-23.csv", row.names = FALSE)
testtst %>%
rename(id = Ensembl ID)
testtst %>%
rename(id = Ensembl id)
View(testtst)
names(testtst)[names(testtst) == "Ensembl id"] <- "id"
View(testtst)
testtst %>%
rename(id = Ensembl )
names(testtst)[names(testtst) == "Ensembl id"] <- "id"
names(testtst)[names(testtst) == "id"] <- "Ensembl_id"
View(testtst)
names(testtst)[names(testtst) == "id"] <- "Ensembl_"ID
names(testtst)[names(testtst) == "id"] <- "Ensembl_ID"
View(testtst)
View(testtst)
write.csv(testtst, file = "E:/Bioinformatics/Scripts/gene_set_Colorectal_cancer.2021-10-23.csv", row.names = FALSE)
setwd("E:/Bioinformatics/GitHub/R-programming/Data Manipulation")
# ekhane ami notun ekta variable create koral size nam diye, ekhane height jodi 1 theke beshi hoy and weight jodi 75 theke beshi hoy tahole eta true or Big hobe and jodi er cheye kom hoy tahole false or Small hobe
mutate(size = height > 1 & weight > 75,
size = if_else(size == TRUE, "Big", "Small"))
```
# Recoding a dataframe using %in% operator
## Create a new dataframe
```
my_basket = data.frame(ITEM_GROUP = c("Fruit","Fruit","Fruit","Fruit","Fruit","Vegetable","Vegetable","Vegetable","Vegetable","Dairy","Dairy","Dairy","Dairy","Dairy"),
ITEM_NAME = c("Apple","Banana","Orange","Mango","Papaya","Carrot","Potato","Brinjal","Raddish","Milk","Curd","Cheese","Milk","Paneer"),
Price = c(100,80,80,90,65,70,60,70,25,60,40,35,50,60),
Tax = c(2,4,5,NA,2,3,NA,1,NA,4,5,NA,4,NA))
```
# ekhane ami notun ekta variable create koral size nam diye, ekhane height jodi 1 theke beshi hoy and weight jodi 75 theke beshi hoy tahole eta true or Big hobe and jodi er cheye kom hoy tahole false or Small hobe
mutate(size = height > 1 & weight > 75,
size = if_else(size == TRUE, "Big", "Small"))
```
# Recoding a dataframe using %in% operator
## Create a new dataframe
```
my_basket = data.frame(ITEM_GROUP = c("Fruit","Fruit","Fruit","Fruit","Fruit","Vegetable","Vegetable","Vegetable","Vegetable","Dairy","Dairy","Dairy","Dairy","Dairy"),
ITEM_NAME = c("Apple","Banana","Orange","Mango","Papaya","Carrot","Potato","Brinjal","Raddish","Milk","Curd","Cheese","Milk","Paneer"),
Price = c(100,80,80,90,65,70,60,70,25,60,40,35,50,60),
Tax = c(2,4,5,NA,2,3,NA,1,NA,4,5,NA,4,NA))
```
# ekhane ami notun ekta variable create koral size nam diye, ekhane height jodi 1 theke beshi hoy and weight jodi 75 theke beshi hoy tahole eta true or Big hobe and jodi er cheye kom hoy tahole false or Small hobe
mutate(size = height > 1 & weight > 75,
size = if_else(size == TRUE, "Big", "Small"))
```
# Recoding a dataframe using %in% operator
## Create a new dataframe
```
my_basket = data.frame(ITEM_GROUP = c("Fruit","Fruit","Fruit","Fruit","Fruit","Vegetable","Vegetable","Vegetable","Vegetable","Dairy","Dairy","Dairy","Dairy","Dairy"),
ITEM_NAME = c("Apple","Banana","Orange","Mango","Papaya","Carrot","Potato","Brinjal","Raddish","Milk","Curd","Cheese","Milk","Paneer"),
Price = c(100,80,80,90,65,70,60,70,25,60,40,35,50,60),
Tax = c(2,4,5,NA,2,3,NA,1,NA,4,5,NA,4,NA))
```
# How to edit a data frame or rename a columns in data frame, or data frame manupulation, or how to manipulate a dataframe
### Now create a dataframe or you can load any dataset
my_data = data.frame(metagenomics = c(12, 13, 14, 15, 67,),
RNAseq = c(34, 46, 67, 65, 89),
Cancer Genomics = c (23, 43, 86, 90, 80))
# How to edit a data frame or rename a columns in data frame, or data frame manupulation, or how to manipulate a dataframe
### Now create a dataframe or you can load any dataset
my_data = data.frame(Metagenomics = c(12, 13, 14, 15, 67,),
RNAseq = c(34, 46, 67, 65, 89),
Cancer_Genomics = c (23, 43, 86, 90, 80))
library(tidyverse)
# How to edit a data frame or rename a columns in data frame, or data frame manupulation, or how to manipulate a dataframe
### Now create a dataframe or you can load any dataset
my_data = data.frame(Metagenomics = c(12, 13, 14, 15, 67,),
RNAseq = c(34, 46, 67, 65, 89),
Cancer_Genomics = c (23, 43, 86, 90, 80))
View(my_basket)
# How to edit a data frame or rename a columns in data frame, or data frame manupulation, or how to manipulate a dataframe
### Now create a dataframe or you can load any dataset
my_data = data.frame(Metagenomics = c(12, 13, 14, 15, 67,),
RNAseq = c(34, 46, 67, 65, 89),
Cancer_Genomics = c (23, 43, 86, 90, 80))
# How to edit a data frame or rename a columns in data frame, or data frame manupulation, or how to manipulate a dataframe
### Now create a dataframe or you can load any dataset
my_data = data.frame(Metagenomics = c(12, 13, 14, 15, 67),
RNAseq = c(34, 46, 67, 65, 89),
Cancer_Genomics = c (23, 43, 86, 90, 80))
View(my_data)
### Rename any column in a data frame or edit a column in any dataframe
my_data %>%
rename(
Microbiome = Metagenomics,
RNAsequence = RNAseq,
Cancer_Bioinformatics = Cancer_Genomics
)
View(my_data)
### Rename any column in a data frame or edit a column in any dataframe
my_data %>%
rename(
Microbiome = Metagenomics,
RNAsequence = RNAseq,
Cancer_Bioinformatics = Cancer_Genomics
)
View(my_data)
View(my_data)
### Rename any column in a data frame or edit a column in any dataframe
My_data2 = my_data %>%
rename(
Microbiome = Metagenomics,
RNAsequence = RNAseq,
Cancer_Bioinformatics = Cancer_Genomics
)
View(My_data2)
### Rename any column in a data frame or edit a column in any dataframe
my_data2 = my_data %>%
rename(
Microbiome = Metagenomics,
RNAsequence = RNAseq,
Cancer_Bioinformatics = Cancer_Genomics
)
### Rename any column in a data frame or edit a column in any dataframe
my_data2 = my_data %>%
rename(
Microbiome = Metagenomics,
RNAsequence = RNAseq,
Cancer_Bioinformatics = Cancer_Genomics
)
View(my_data2)
# get column names
colnames(my_data)
names(my_data2)[names(my_data2) == "Microbiome"] <- "Metagenomics"
View(my_data)
View(my_data)
names(my_data2)[names(my_data2) == "RNAsequence"] <- "RNAs"
names(my_data2)[names(my_data2) == "Cancer_Bioinformatics"] <- "Cancer"
View(my_data2)
