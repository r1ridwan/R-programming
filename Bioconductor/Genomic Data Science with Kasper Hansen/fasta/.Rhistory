?reverse
reverseComplement(chrM)
subseq(chrM, start = 85769, width = 10)
#------------Find Alphabet Frequency for Chromososme M--------------
af1 <- alphabetFrequency(chrM)
af1
sum(af1) == length(chrM)
p1 <- "TTCATAATT"
vcountPattern(p1, chrM)
#------------------Count all exact matched of Pattern "ACCCAGGGAC"---------------------------
getSeq(yeast, "chrM")
vcountPattern(p1, chrM)
vcountPattern(p1, chrM)
vcountPattern(p1, chrM)
# Like most pattern matching functions in Biostrings, the countPattern and matchPattern functions support inexact matching. One form of inexact matching is to allow a few mismatching letters per match. Here we allow at most one:
vcountPattern(p1, chrM, max.mismatch=1)
m1 <- vmatchPattern(p1, chrM, max.mismatch = 1)
yeast <- BSgenome.Scerevisiae.UCSC.sacCer2
yeast
#------------Get Chromosome M into an Object chrM and do some analysis--------------------
chrM <- yeast$chrM
#------------------Count all exact matched of Pattern "ACCCAGGGAC"---------------------------
getSeq(yeast, "chrM")
p1 <- "TTCATAATT"
vcountPattern(p1, chrM)
# Like most pattern matching functions in Biostrings, the countPattern and matchPattern functions support inexact matching. One form of inexact matching is to allow a few mismatching letters per match. Here we allow at most one:
vcountPattern(p1, chrM, max.mismatch=1)
countPattern(p1, chrM)
p1 <- "TTCATAATT"
countPattern(p1, chrM)
# Like most pattern matching functions in Biostrings, the countPattern and matchPattern functions support inexact matching. One form of inexact matching is to allow a few mismatching letters per match. Here we allow at most one:
countPattern(p1, chrM, max.mismatch=1)
m1 <- matchPattern(p1, chrM, max.mismatch = 1)
m1
class(m1)
mismatch(p1, m1[4:5])
p2 <- DNAString("AAGCCTAAGCCTAAGCCTAA")
m2 <- matchPattern(p2, chrI, max.mismatch=2)
m2 <- matchPattern(p2, chrM, max.mismatch=2)
m2[1:4]
m2[1:4]
m2 <- matchPattern(p2, chrM, max.mismatch=2)
m2[1:4]
m2[1:2]
m2
chrI <- yeast$chrI
m2 <- matchPattern(p2, chrI, max.mismatch=2)
m2
m2[1:4]
m2[1:4]
#--------------- Get the list of BSgenome available datasets-----------------
available.genomes()
BiocManager::install("BSgenome.Celegans.UCSC.ce2")
genome
genome
genome <- BSgenome.Celegans.UCSC.ce2
library(BSgenome.Celegans.UCSC.ce2)
genome <- BSgenome.Celegans.UCSC.ce2
genome
chrI <- genome$chrI
p2 <- DNAString("AAGCCTAAGCCTAAGCCTAA")
m2 <- matchPattern(p2, chrI, max.mismatch=2)
m2[1:4]
p2 = m2[1:4]
p2 == m2[1:4]
mismatch(p2, m2[1:4])
mismatch(p2, m2[1:4])
p2 <- DNAString("AAGCCTAAGCCTAAGCCTAA")
mismatch(p2, m2[1:4])
#list of exact matches and the list of inexact matches can both be obtained with:
m2[p2==m2]
#Like most pattern matching functions in Biostrings, the countPattern and matchPattern functions support inexact matching. One form of inexact matching is to allow a few mismatching letters per match. Here we allow at most one:
countPattern(p1, chrM, max.mismatch=1)
countPattern(p1, chrM)
m2[p2!=m2]
#Note that the length of m2[p2 == m2] should be equal to countPattern(p2, chrI, max.mismatch=0)
p1 <- "TTCATAATT"
countPattern(p1, chrI)
countPattern(p1, chr, max.mismatch=1)
countPattern(p1, chrI, max.mismatch=1)
countPattern(p1, chrI, max.mismatch=0)
#Note that the length of m2[p2 == m2] should be equal to countPattern(p2, chrI, max.mismatch=0)
countPattern(p2, chrI, max.mismatch=0)
#list of exact matches and the list of inexact matches can both be obtained with:
m2[p2==m2]
m2[1:4]
m2[1:4]
m2[1:4]
p2 == m2[1:4]
seqinfo(yeast)
library(BiocManager)
library(BSgenome)
library(Biostrings)
library(IRanges)
library(GenomicRanges)
library(dplyr)
library(tidyverse)
library(plyranges)
library(ShortRead)
library(Rqc)
library(AnnotationHub)
library(AnnotationHub)
library(BSgenome.Scerevisiae.UCSC.sacCer2)
yeast <- BSgenome.Scerevisiae.UCSC.sacCer2
yeast
display(yeast)
ahb <- display(yeast)
ahb <- display(BSgenome)
ahb <- display(BSgenome)
ahb <- display(BSgenome.Scerevisiae.UCSC.sacCer2)
#Summary of Accessor
.S4methods(class = "GenomeDescription")
# For Subclasses
showMethods(classes = "GenomeDescription", where = search())
show(yeast)
is(yeast)
isS4(yeast)
class(yeast)
# Investigate some other accesors of a_genome object
organism(yeast)
a_genome
provider(yeast)
seqinfo(yeast)
class(yeast)
metadata(yeast)
organism(yeast)
provider(yeast)
provider(genome)
organism(genome)
show(genome)
#-------------------Summary of Accessor----------------------------------
.S4methods(class = "GenomeDescription")
#-------------------Summary of Accessor----------------------------------
.S4methods(class = "BSgenome")
#------------Formal Definition of the Class-------------------------------
showClass("BSgenome")
#-------------------Summary of Accessor----------------------------------
.S4methods(class = "BSgenome")
show(genome)
show(BSgenome)
show(BSgenome)
show(genome)
str(yeast)
.S4methods(class = "GenomeDescription")
# For Subclasses
showMethods(classes = "GenomeDescription", where = search())
showMethods(classes = "BSgenome", where = search())
# Genomes are often big, but interest usually lies in specific regions of them. Therefore, we need to subset a genome by extracting parts of it. To pick a sequence interval, use getSeq() and specify the name of the chromosome and the start and end of the sequence interval.
#S4 method getSeq() requires a BSgenome object
getSeq(yeast)
# OR,
# Display Chromosome with the following way-
yeast$chrXV
# Select Chromosome sequences by name, one or many
getSeq(yeast, "chrI")
# Select start, end and or width
# end = 10, select first 10 base pairs of each chromosome
getSeq(yeast, end = 10)
# Get the first 30 bases of chrM
getSeq(yeast, names = "chrM", end = 30)
# Get the first 30 bases of chrM
getSeq(yeast, names = "chrM", end = 30)
# Get the first 30 bases of chrM
getSeq(yeast, names = "chrM", end = 30)
##-----------------getseq----------------------------------------------------------------
#Genomes are often big, but interest usually lies in specific regions of them. Therefore, we need to subset a genome by extracting parts of it. To pick a sequence interval, use getSeq() and specify the name of the chromosome and the start and end of the sequence interval.
#S4 method getSeq() requires a BSgenome object
getSeq(yeast)
# OR,
# Display Chromosome with the following way-
yeast$chrXV
# Select Chromosome sequences by name, one or many
getSeq(yeast, "chrI")
getSeq(chrI)
getSeq(genome, "chrI")
getSeq(genome, "chrI", end = 10)
getSeq(yeast, names = "chrI", start = 100, end = 150)
getSeq(genome, "chrM", start = 100, end = 150)
##---------------pattern-matching-(countpattern)----------------------------------------------
#------------------Count all exact matched of Pattern "ACCCAGGGAC"-------------
chrM <- genome$chrM
p1 <- "TTCATAATT"
countPattern(p1, chrM)
p1 <- "TTTTTT"
countPattern(p1, chrM)
??Biostrings
??Biostrings
??Biostrings
# Biological String Container
showClass("XString")
showClass("BString")
showClass("BStringSet")
#URL: http://genome.ucsc.edu/goldenPath/help/iupac.html
# Biostrings Alphabet
# DNA 4 Bases
DNA_BASES
# RNA 4 Bases
RNA_BASES
# 20 Amino Acids
AA_STANDARD
# IUPAC_Code_Map
DNA_ALPHABET
RNA_ALPHABET
AA_ALPHABET
showClass("XStringSet")
#Transcription Process (DNA to RNA)
dna_seq <- DNAString("ATGATCTCGTAA")
dna_seq
rna_seq <- RNAString(dna_seq)
rna_seq
aa_seq <- translate(rna_seq)
aa_seq
# Shortcut Translation DNA to Amino Acids
translate(dna_seq)
#------------Find Alphabet Frequency for Chromososme M--------------
alpha(chrM)
#------------Find Alphabet Frequency for Chromososme M--------------
alpha(yeast)
af1 <- alphabetFrequency(chrM)
af1
sum(af1) == length(chrM)
#------------Find Alphabet Frequency for Chromososme M--------------
af <- alpha(yeast)
#------------Find Alphabet Frequency for Chromososme M--------------
af <- alpha(chrM)
af
#------------Find Alphabet Frequency for Chromososme M--------------
af <- alphabet(chrM)
af
af1 <- alphabetFrequency(chrM)
af1
alphabet(yeast)
seqtype(yeast)
library(BSgenome.Scerevisiae.UCSC.sacCer2)
yeast <- BSgenome.Scerevisiae.UCSC.sacCer2
alphabet(yeast)
alphabetFrequency(yeast)
alphabet(genome)
#------------Find Alphabet-&-Alphabet-Frequency for Chromososme M--------------
chrI <- genome$chrI
#------------Find Alphabet-&-Alphabet-Frequency for Chromososme M--------------
chrI <- genome$chrI
af <- alphabet(chrI)
af
af1 <- alphabetFrequency(chrI)
af1
sum(af1) == length(chrI)
#------------Find Alphabet-&-Alphabet-Frequency for Chromososme M--------------
chrI <- yeast$chrI
af <- alphabet(chrI)
af
af1 <- alphabetFrequency(chrI)
af1
# Biostrings: Subsetting or Manipulating the sequences with subseq and unlist command
# Unlist the set, select the first 100 seq, and assign to dna
dnaa <- subseq(chrM, start = 1, width = 100)
dnaa
rna <- RNAString(dnaa)
rna
dnaa
rna
rna <- RNAString(dnaa)
rna
dna <- unlist(subseq(chrM, start = 1, width = 100))
dna
dna_seqs <- subseq(unlist(chrM), end = 100)
dna_seqs
rna <- RNAString(dna)
rna
aa <- translate(dna)
aa
dna <- unlist(subseq(chrM, start = 1, width = 100))
dna
rna <- RNAString(dna)
rna
?unlist
?unlist
#=====================================================================================
## DataCamp Sequence Handling. From a single sequence to a set
# Putting chrI chromosome into a vector
chrI <- yeast$chrI
# Create a new set from a single sequence
yeastset <- DNAStringSet(chrI, start = c(1, 101, 201, 301), end = c(100, 200, 300, 400))
yeastset
length(yeastset)
width(yeastset) # Width only used on set and gives number of character per sequenc
# Collate all the sequences in a single sequence using unlist() function, and for single seq width will not work here.
yeastt <- unlist(yeastset)
length(yeastt)
nchar(yeastt)
width(yeastt)
# Translation RNA to Amino Acids
RNA_GENETIC_CODE
#Transcription Process (DNA to RNA)
dna_seq <- DNAString("ATGATCTCGTAA")
dna_seq
complement(dna_seq)
# Translation RNA to Amino Acids
RNA_GENETIC_CODE
rna_seq
# How to reverse the sequence set
yeastset
rev(yeastset)
# Reverse the each sequence or change the order of sequence in a set from right to left.
reverse(yeastset)
# Reverse complement
reverseComplement(yeastt)
# Sort a sequence set, if decreasing = TRUE it execute sorting in Z to A order, if decreasing = FALSE it execulte sorting A to Z order
sort(yeastset, decreasing = FALSE)
subseq(yeast,
start = c(20, 40, 2),
end = c(50, 45, 22)
)
dna2 <- subseq(yeast,
start = c(20, 40, 2),
end = c(50, 45, 22)
)
library(BSgenome.Scerevisiae.UCSC.sacCer2)
yeast <- BSgenome.Scerevisiae.UCSC.sacCer2
dna2 <- subseq(yeast,
start = c(20, 40, 2),
end = c(50, 45, 22)
)
dna2 <- subseq(chrI,
start = c(20, 40, 2),
end = c(50, 45, 22)
)
dna2 <- subseq(chrI,
start = c(20, 40, 2),
end = c(50, 45, 22)
)
library(IRanges)
dna2 <- subseq(chrI,
start = c(20, 40, 2),
end = c(50, 45, 22)
)
subseq(chrI, start = c(20, 40, 60), end = c(39, 59, 79))
dna <- subseq(chrI, start = c(20, 40, 60), end = c(39, 59, 79))
library(BiocManager)
library(BiocManager)
library(Homo.sapiens)
browseVignettes(Homo.sapiens)
browseVignettes(IRanges)
browseVignettes("Homo.sapiens")
browseVignettes("IRanges")
vignette("create_object", "IRanges")
vignette("create_objects", "IRanges")
help(package="IRanges", help_type = "html")
help(package="BSgenome", help_type = "html")
help(package="GenomicRanges", help_type = "html")
vignette( "IRanges")
vignette( package="IRanges")
vignette( package="GenomicRanges")
vignette("start" package="GenomicRanges")
vignette("start", package="GenomicRanges")
setwd("E:/Bioinformatics/Scripts/DataCamp/Intro to Bioconductor in R")
library(BiocManager)
library(BSgenome)
library(Biostrings)
library(IRanges)
library(GenomicRanges)
library(dplyr)
library(tidyverse)
library(plyranges)
library(ShortRead)
library(Rqc)
# Read FASTQ File in S4 method and check other functions (SRR1971253 SRA file was downloaded for analysis)
# Arabidopsis Thaliana plant SRA file used here
fasttq <- readFastq(dirPath = "fasta/SRR1971253_pass.fastq", pattern = "fastq")
# Read FASTQ File in S4 method and check other functions (SRR1971253 SRA file was downloaded for analysis)
# Arabidopsis Thaliana plant SRA file used here
fasttq <- readFastq(dirPath = "fasta/", pattern = "fastq")
fasttq
#==============================Sequence Quality====================================================
## Sequence Quality
# Endcoding sequence Quality or FASTQ sequence quality score
encoding(quality(fasttq))
quality(fasttq)
sread(fasttq)[1]
# Quality is represented as ASCII Characters
quality(fasttq)[1]
sread(fasttq)[1]
# Quality is represented as ASCII Characters
quality(fasttq)[1]
# Phred Quality Instance
qp <- PhredQuality(quality(fasttq))
# Transform encoding phredquality into scores (Score 30 is considered as good quality score)
qs <- as(qp, "IntegerList")
qs
##-------------------------------Sequence-Quality-Assessment-------------------------------
# Quality Assessment
qaSummary <- qa(fasttq, lane = 1)
qaSummary
names(qaSummary)
class: ShortReadQQA(10)
# Get HTML Report
browseURL(report(qaSummary))
#Check Nucleotide frequency per cycle
# Sequence Alphabet
alphabet(sread(fasttq))
abc <- alphabetByCycle(sread(fasttq))
abc
# Each observation is a letter and each vaiable is a cycle. First, Select the first 4 rows nucleotides A, C, G, T
# Then Transpose
nucbycycle <- t(abc[1:4, ])
nucbycycle
# Convert to tibble and add cycle numbers
nucbycycle <- nucbycycle %>% as.tibble() %>%
mutate(cycle = 1:50)
nucbycycle
##-------------------------------Sequence-Quality-Assessment-------------------------------
# Quality Assessment
qaSummary <- qa(fasttq, lane = 1)
qaSummary
##-------------------------------Sequence-Quality-Assessment-------------------------------
# Quality Assessment
qaSummary <- qa(fasttq, type = "fastq", lane = 1)
qaSummary
qaSummary[["readCounts"]]
qaSummary[["alignQuality"]]
qaSummary[["sequenceDistribution"]]
#------------Frequency-Plotting-----------------------
#Nucleotide Frequency Plot
# Create a line plot of cycle vs. count
glimpse(nucbycycle)
nucbycycle %>%
# Gather the nucleotide letters in alphabet and get a new count column
gather(key = alphabet, value = count , -cycle) %>%
ggplot(aes(x = cycle, y =  count, color = alphabet)) +
geom_line(size = 0.5 ) +
labs(y = "Frequency") +
theme_bw() +
theme(panel.grid.major.x = element_blank())
#===========================Match-and-Filter==========================================
## Matching and Filtering
# Counting Duplicates- TRUE is the number of duplicates
table(srduplicated(fasttq))
# Cleaning reads from duplicates
cleanRead <- fasttq [srduplicated(fasttq) == FALSE]
# Counting Duplicates
table(srduplicated(cleanRead))
# Use a custom filter to remove reads from sequence
# This filter to remove reads shorter than a minimum number of bases
minWidth <- 51
readWidthCutOff <- srFilter(function(x) {width(x) >= minWidth},
name = "MinWidth")
fasttq[readWidthCutOff(fasttq)]
# Save your filter
myfilter <- nFilter(threshold = 10, .name = "cleaNFilter")
# Use the filter at reading point
filtered <- readFastq(dirPath = "fasta/",
pattern = ".fastq",
filter(myfilter))
# You will retrieve only those reads that have a maximum of 10 Nucleotides
filtered
#ID filter example
myidfilter <- idFilter(regex = ":3:1")
#Optional parameters are .name, fixed and exclude
#Use the filter at reading point
filtered <- readFastq(dirPath = "fasta/", pattern = ".fastq",
filter = myfilter)
filtered
#Filter to remove poly-A regions
myfilterPolyA <- polynFilter(threshold = 10, nuc = c("A"))
myfilterPolyA
srFilter(myfilterPolyA)
srFilter(myfilterPolyA)
srFilter(myfilterPolyA)
filtered[myfilterPolyA(filtered)]
#Filter to remove poly-A regions
# Will return the sequence that have a maximum number of 10 consecutive A's
myfilterPolyA <- polynFilter(threshold = 10, nuc = c("A"))
#Filter to remove poly-A regions
# Will return the sequence that have a maximum number of 10 consecutive A's
myfilterPolyA <- polynFilter(threshold = 10, nuc = c("A"))
filtered[myfilterPolyA(filtered)]
myStartFilter <- srFilter(function(x) substr(sread(x), 1, 5) == "ATGCA")
fasttq[myStartFilter(fasttq)]
readWidthCutOff <- srFilter(function(x) {width(x) >= minWidth},name = "MinWidth")
fasttq[readWidthCutOff(fasttq)]
# Filter reads into selectedReads using myStartFilter
selectedReads <- fasttq[myStartFilter(fasttq)]
# Check class of selectedReads
class(selectedReads)
# Check class of fqsample
class(fasttq)
files <- c("fasta/sequence.fasta", "fasta/SRR1971253_pass.fastq")
qarqc <- rqcQA(files, workers = 4)
files <- c("fasta/")
qarqc <- rqcQA(files, workers = 4)
qarqc <- rqcQA(files)
files <- c("fasta/sequence.fasta", "fasta/SRR1971253_pass.fastq")
files <- c("fasta/sequence.fasta")
qarqc <- rqcQA(files)
files <- ("fasta/sequence.fasta")
qarqc <- rqcQA(files)
class(qarqc)
qarqc <- rqcQA(files)
class(qarqc)
files <- c("fasta/")
qarqc <- rqcQA(files)
files <- "fasta/sequence.fasta", "fasta/SRR1971253_pass.fastq"
files <- "fasta/sequence.fasta" "fasta/SRR1971253_pass.fastq"
files <- "fasta/sequence.fasta" "fasta/SRR1971253_pass.fastq"
qarqc <- rqcQA(files, workers = 2)
files <- "fasta/sequence.fasta" "fasta/SRR1971253_pass.fastq"
library(Rqc)
files <- "fasta/sequence.fasta" "fasta/SRR1971253_pass.fastq"
setwd("E:/Bioinformatics/Scripts/DataCamp/Intro to Bioconductor in R/fasta")
files <- "fasta/"
qarqc <- rqcQA(files, workers = 2)
files <- "fasta/sequence.fasta" "fasta/SRR1971253_pass.fastq"
