library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
my_data =
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
iris
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
iris
my_data = data(iris)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
iris
my_data = as_tibble(iris)
View(my_data)
View(iris)
View(my_data)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
iris
my_data = as_tibble(iris)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
View(iris)
View(my_data)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
my_data <- as.tibble(iris)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
my_data <- as.tibble(iris)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
my_data <- as.tibble(iris)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
my_data2 <- as.tibble(iris)
View(my_data2)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Load data
data(iris)
my_data <- as.tibble(iris)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
x <- c(1, 1, 4, 5, 4, 6)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
x <- c(1, 1, 4, 5, 4, 6)
duplicated(x)
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Given the following vector:
x <- c(1, 1, 4, 5, 4, 6)
# To find the position of duplicate elements in x, use this:
duplicated(x)
[1] FALSE  TRUE FALSE FALSE  TRUE FALSE
# Extract duplicate elements:
x[duplicated(x)]
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Given the following vector:
x <- c(1, 1, 4, 5, 4, 6)
# To find the position of duplicate elements in x, use this:
duplicated(x)
[1] FALSE  TRUE FALSE FALSE  TRUE FALSE
# Extract duplicate elements:
x[duplicated(x)]
#  remove duplicated elements
x[!duplicated(x)]
library('tidyverse')
# Fucntions
```
duplicated(): #for identifying duplicated elements and
unique(): #for extracting unique elements,
distinct() [dplyr package] #to remove duplicate rows in a data frame.
```
# Given the following vector:
x <- c(1, 1, 4, 5, 4, 6)
# To find the position of duplicate elements in x, use this:
duplicated(x)
[1] FALSE  TRUE FALSE FALSE  TRUE FALSE
# Extract duplicate elements:
x[duplicated(x)]
#  remove duplicated elements
x[!duplicated(x)]
x
# Load data
data <- as.tibble(iris)
View(data)
# Load data
data <- as.tibble(iris)
my_data[!duplicated(my_data$Sepal.Width), ]
# Load data
data <- as.tibble(iris)
data[!duplicated(data$Sepal.Width), ]
View(data)
# Load data
data <- as.tibble(iris)
data = data[!duplicated(data$Sepal.Width), ]
# Load data
data <- as.tibble(iris)
data = data[!duplicated(data$Sepal.Width), ]
# Load data
data <- as.tibble(iris)
View(data)
View(data)
# Extract unique elements
x = c(1,1,4,5,4,6)
# Extract unique elements
x = c(1,1,4,5,4,6)
unique(x)
unique(data)
data2 = unique(data)
View(data2)
unique(data)
data2 = unique(data)
# Remove duplicate rows in a data frame
data %>% distinct()
data %>% distinct(Sepal.Length, .keep_all = TRUE)
# Remove duplicate rows based on certain columns (variables):
# Remove duplicated rows based on Sepal.Length
data %>% distinct(Sepal.Length, .keep_all = TRUE)
```
data %>% distinct(Sepal.Length, Petal.Length, .keep_all = T)
# Remove duplicate rows based on certain columns (variables):
# Remove duplicated rows based on Sepal.Length
data %>% distinct(Sepal.Length, .keep_all = TRUE)
```
data %>% distinct(Sepal.Length, Petal.Length, .keep_all = TRUE)
# Remove duplicated rows based on Sepal.Length and Petal.Width
data3 = data %>% distinct(Sepal.Length, Petal.Length, .keep_all = TRUE)
```
View(data3)
# Remove duplicated rows based on Sepal.Length and Petal.Width
data3 = data %>% distinct(Sepal.Length, Petal.Length, .keep_all = TRUE)
```
x <- round(rnorm(20, 10, 5))
# Remove duplicated rows based on Sepal.Length and Petal.Width
data3 = data %>% distinct(Sepal.Length, Petal.Length, .keep_all = TRUE)
```
x <- round(rnorm(20, 10, 5))
x
```
# Remove duplicates rwos from a data frame based on a column values
```
# Load data
data <- as.tibble(iris)
duplicated(iris)
```
# Remove duplicates rwos from a data frame based on a column values
```
# Load data
data <- as.tibble(iris)
duplicated(iris)
# Find the duplicated row number
which(duplicated(iris))
# Remove duplicates based on Sepal.Width columns
# ekhane 'speal.width' jei data gula duplicate hoise oi full row gula delete hoye jabe.
data = data[!duplicated(data$Sepal.Width), ]
```
```
# Remove duplicates rwos from a data frame based on a column values
```
# Load data
data <- as.tibble(iris)
duplicated(iris)
# Find the duplicated row number
which(duplicated(iris))
# Remove duplicate rows in a data frame
```
# Remove duplicate rows based on all columns
data %>% distinct()
x <- matrix(rep(1:9, length.out = 18),
nrow = 6, ncol = 3, byrow = T)
View(x)
View(x)
library(sjmisc)
data(efc)
View(data)
install.package("sjmisc")
library(sjmisc)
install.package(sjmisc)
library(sjmisc)
install.package(sjmisc)
install.package(sjmisc)
install.packages(sjmisc)
install.packages('sjmisc')
install.packages('sjmisc')
library(sjmisc)
library(sjmisc)
library(sjmisc)
data(efc)
View(efc)
View(efc)
frq(efc, e17age, auto.grp = 5)
View(efc)
library(tidyverse)
data(starwars)
data(starwars)
starwars
View(starwars)
sw = starwars
View(sw)
sw = starwars %>%
select(name, height, mass, gender) %>% # ei variable gula niye sw data arrange hobe
rename(weight = mass) %>%
na.omit()
View(sw)
sw = starwars %>%
select(name, height, mass, gender) %>% # ei variable gula niye sw data arrange hobe
rename(weight = mass) %>% # mass variable k weight te rename korlam
na.omit() %>%
mutate(height = height / 100)
View(sw)
sw = starwars %>%
select(name, height, mass, sex) %>% # ei variable gula niye sw data arrange hobe
rename(weight = mass) %>% # mass variable k weight te rename korlam
na.omit() %>%
mutate(height = height / 100) %>% # Height variable er value cm a deya ase, eta ke meter a nilam
filter(gender == "")
View(sw)
# ei variable gula niye sw data arrange hobe
# mass variable k weight te rename korlam
# Height variable er value cm a deya ase, eta ke meter a nilam
sw = starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(gender == "")
# ei variable gula niye sw data arrange hobe
# mass variable k weight te rename korlam
# Height variable er value cm a deya ase, eta ke meter a nilam
sw = starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex == "male" |
sex == "female")
# ei variable gula niye sw data arrange hobe
# mass variable k weight te rename korlam
# Height variable er value cm a deya ase, eta ke meter a nilam
# filter = ei function diye only male and female value gula k filter kore nilam
# or you can write , both function does the same thing= filter( sex %in% c("male", "female"))
sw = starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex == "male" |
sex == "female") %>%
mutate(sex = recode(sex,
male = "M",
female = "F"))
# ei variable gula niye sw data arrange hobe
# mass variable k weight te rename korlam
# Height variable er value cm a deya ase, eta ke meter a nilam
# filter = ei function diye only male and female value gula k filter kore nilam
# or you can write , both function does the same thing= filter( sex %in% c("male", "female"))
# erpor mutate function diye male k M and female k F diye express korlam
sw = starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex == "male" |
sex == "female") %>%
mutate(sex = recode(sex,
male = "M",
female = "F")) %>%
mutate(size = height > 1 & weight > 75)
# ei variable gula niye sw data arrange hobe
# mass variable k weight te rename korlam
# Height variable er value cm a deya ase, eta ke meter a nilam
# filter = ei function diye only male and female value gula k filter kore nilam
# or you can write , both function does the same thing= filter( sex %in% c("male", "female"))
# erpor mutate function diye male k M and female k F diye express korlam
sw = starwars %>%
select(name, height, mass, sex) %>%
rename(weight = mass) %>%
na.omit() %>%
mutate(height = height / 100) %>%
filter(sex == "male" |
sex == "female") %>%
mutate(sex = recode(sex,
male = "M",
female = "F")) %>%
mutate(size = height > 1 & weight > 75,
size = if_else(size == TRUE, "Big", "Small"))
